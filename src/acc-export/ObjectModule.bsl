#Область ОписаниеПеременных

Перем ИменаВидовМодулей; // Массив имен видов модулей.
Перем ИменаОбъектовСФормами; // Массив имен объектов метаданных с формами.
Перем ИсточникПроверки; // Константа. Содержит источник проверки = acc
Перем ТаблицаСинонимовОбъектов; // Таблица значений с синонимами объектов метаданных.
Перем ШаблонПоискаУказанияСтроки; // Шаблон поиска указания строки в ошибках.
Перем ДлинаШаблонаПоискаУказанияСтроки; // Длина шаблона поиска указания строк в ошибках.

Перем СсылкиНаСтандарты; // Кеш ссылок на стандарты. Соответствие.

Перем ОписанияОшибок; // Выборка описаний ошибок.

Перем ФорматЭкспортаReportJSON Экспорт; // Имя формата Report JSON. Константа.
Перем ФорматЭкспортаGenericIssue Экспорт; // Имя формата GenericIssue. Константа.
Перем ВерсияОбработки Экспорт; // Версия обработки проекта. Константа.

Перем ЭтоВыгрузкаEDT Экспорт; // Признак использования формата исходников EDT.

Перем ФорматОшибкиТолькоКод Экспорт; // Имя формата ошибки -> код. Константа.
Перем ФорматОшибкиТолькоНаименование Экспорт; // Имя формата шибки -> наименование. Константа.
Перем ФорматОшибкиКодНаименование Экспорт; // Имя формата ошибки -> Код + Наименование. Константа.
Перем ОтсутствующиеВПроверкеНастройкиОшибок Экспорт; // Массив ошибок, отсутствующих в проверке.
Перем АдресФайлаКлассификацииВоВременномХранилище Экспорт; // Адрес файла классификатора во временном хранилище.

Перем СмещениеПоискаПлатформеннойОшибки; // Смещение при поиске текста ошибок в платформенных ошибках. Константа.
Перем КоличествоСекундВЧасе; // Количество секунд в часе. Константа.
Перем КоличествоСекундВМинуте; // Количество секунд в минуте. Константа.
Перем МаксимальноеЗначениеПрогрессБара; // Количество пунктов в прогресс баре. Константа.

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Инициализировать первые данные, требуемые для экспорта экзамена.
//
Процедура ИнициализироватьПервичныеДанные() Экспорт
	
	ИменаВидовМодулей = Новый Массив;
	ИменаВидовМодулей.Добавить("Модуль объекта");
	ИменаВидовМодулей.Добавить("Модуль менеджера");
	ИменаВидовМодулей.Добавить("Модуль обычного приложения");
	ИменаВидовМодулей.Добавить("Модуль сеанса");
	ИменаВидовМодулей.Добавить("Модуль внешнего соединения");
	ИменаВидовМодулей.Добавить("Модуль команды");
	ИменаВидовМодулей.Добавить("Модуль менеджера значения");
	ИменаВидовМодулей.Добавить("Модуль набора записей");
	ИменаВидовМодулей.Добавить("Модуль приложения");
	ИменаВидовМодулей.Добавить("Модуль управляемого приложения");
	ИменаВидовМодулей.Добавить("Модуль");	
	
	ИменаОбъектовСФормами = Новый Соответствие;
	ИменаОбъектовСФормами.Вставить("Обработки", "DataProcessors");
	ИменаОбъектовСФормами.Вставить("Отчеты", "Reports");
	ИменаОбъектовСФормами.Вставить("Справочники", "Catalogs");
	ИменаОбъектовСФормами.Вставить("Документы", "Documents");
	ИменаОбъектовСФормами.Вставить("Общие.ПланыОбмена", "ExchangePlans");
	ИменаОбъектовСФормами.Вставить("Общие.ХранилищаНастроек", "SettingsStorages");
	ИменаОбъектовСФормами.Вставить("Задачи", "Tasks");
	ИменаОбъектовСФормами.Вставить("ЖурналыДокументов", "DocumentJournals");
	ИменаОбъектовСФормами.Вставить("ПланыВидовХарактеристик", "ChartsOfCharacteristicTypes");
	ИменаОбъектовСФормами.Вставить("БизнесПроцессы", "BusinessProcesses");
	ИменаОбъектовСФормами.Вставить("РегистрыНакопления", "AccumulationRegisters");
	ИменаОбъектовСФормами.Вставить("РегистрыСведений", "InformationRegisters");
	ИменаОбъектовСФормами.Вставить("РегистрыРасчета", "CalculationRegisters");
	ИменаОбъектовСФормами.Вставить("РегистрыБухгалтерии", "AccountingRegisters");
	ИменаОбъектовСФормами.Вставить("ПланыСчетов", "ChartsOfAccounts");
	ИменаОбъектовСФормами.Вставить("Перечисления", "Enums");
	
	ТаблицаСинонимовОбъектов = ТаблицаСинонимовОбъектов();
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Конфигурация, "", "");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ОбщийМодуль, 
		"Общие.ОбщиеМодули", "CommonModules");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланОбмена, 
		"Общие.ПланыОбмена", "ExchangePlans");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.КритерийОтбора, 
		"Общие.КритерииОтбора", "FilterCriteria");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ХранилищеНастроек, 
		"Общие.ХранилищаНастроек", "SettingsStorages");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ОбщаяКоманда, 
		"Общие.ОбщиеКоманды", "CommonCommands");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.WebСервис, 
		"Общие.WebСервисы", "WebServices");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.HTTPСервис, 
		"Общие.HTTPСервисы", "HTTPServices");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Константа, 
		"Констант", "Constants");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Справочник, 
		"Справочник", "Catalogs");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Документ, 
		"Документы", "Documents");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ЖурналДокументов, 
		"ЖурналыДокументов", "DocumentJournals");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Перечисление, 
		"Перечисления", "Enums");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Отчет, 
		"Отчеты", "Reports");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Обработка, 
		"Обработки", "DataProcessors");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланВидовХарактеристик, 
		"ПланыВидовХарактеристик", "ChartsOfCharacteristicTypes");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланСчетов, 
		"ПланыСчетов", "ChartsOfAccounts");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланВидовРасчета, 
		"ПланыВидовРасчета", "ChartsOfCalculationTypes");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрСведений, 
		"РегистрыСведений", "InformationRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрНакопления, 
		"РегистрыНакопления", "AccumulationRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрБухгалтерии, 
		"РегистрыБухгалтерии", "AccountingRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрРасчета, 
		"РегистрыРасчета", "CalculationRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.БизнесПроцесс, 
		"БизнесПроцессы", "BusinessProcesses");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Задача, 
		"Задачи", "Tasks");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТребованияРеализацияТребования.ПравилоПроверки КАК ПравилоПроверки,
		|	ТребованияРеализацияТребования.Ссылка.СсылкаНаСтандарт КАК СсылкаНаСтандарт
		|ИЗ
		|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
		|ИТОГИ ПО
		|	ПравилоПроверки";
	
	выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СсылкиНаСтандарты = Новый Соответствие;
	
	Пока выборка.Следующий() Цикл
		
		правило = выборка.ПравилоПроверки;
		массивСтандартов = Новый Массив;
		
		выборкаДетЗаписей = выборка.Выбрать();
		
		Пока выборкаДетЗаписей.Следующий() Цикл
			
			массивСтандартов.Добавить(выборкаДетЗаписей.СсылкаНаСтандарт);
			
		КонецЦикла;
		
		СсылкиНаСтандарты.Вставить(правило, массивСтандартов);
		
	КонецЦикла;
	
	Если ВыгружатьПравила Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ОбнаруживаемыеОшибкиТребования.Ссылка КАК Ошибка,
			|	ОбнаруживаемыеОшибкиТребования.СсылкаНаСтандарт КАК СсылкаНаСтандарт,
			|	ОбнаруживаемыеОшибкиТребования.Требование.ОписаниеHTML КАК Описание
			|ИЗ
			|	Справочник.ОбнаруживаемыеОшибки.Требования КАК ОбнаруживаемыеОшибкиТребования";
		
		ОписанияОшибок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

// Экспортировать ошибки АПК
//
Процедура ЭкспортироватьОшибкиАПК() Экспорт
	
	ЗаполнитьКлассыОшибок();
	ВыборкаОшибокАПК = ВыборкаОшибокАПК();
	
	Если ВыборкаОшибокАПК = Неопределено Тогда
		Лог_Информация("Нет данных для выгрузки");
		Возврат;
	КонецЕсли;
	
	РезультатыПроверки = РезультатыПроверки();
	МассивГруппировок = Новый Массив;
	
	ОбработатьОшибкиАПК(ВыборкаОшибокАПК, РезультатыПроверки, МассивГруппировок);
	ПодготовитьОшибкиАПК(РезультатыПроверки, МассивГруппировок);
	ВыгрузитьОшибкиАПК(РезультатыПроверки, МассивГруппировок);
	
КонецПроцедуры

// Заполнить классы ошибок
//
Процедура ЗаполнитьКлассыОшибок() Экспорт
	
	ТаблицаКлассификации = СформироватьТаблицуКлассификации();
	Если ЗначениеЗаполнено(АдресФайлаКлассификацииВоВременномХранилище) Тогда
		ПрочитатьФайлКлассификацииВТаблицу(ТаблицаКлассификации);
	КонецЕсли;
	Результат = ОбъединитьНастройкиКлассификацииСПроверками(ТаблицаКлассификации);
	// Заполним ТЧ КлассыОшибок
	КлассыОшибок.Загрузить(Результат);
	
	Для каждого цСтрока Из КлассыОшибок Цикл
		
		цСтрока.КодОшибки = СокрЛП(цСтрока.КодОшибки);
		
	КонецЦикла;
	
	// Сформируем массив ошибок, отсутствующих в проверке.
	ОтсутствующиеВПроверкеНастройкиОшибок = Новый Массив;
	НайденныеСтроки = Результат.НайтиСтроки(Новый Структура("ОтсутствуетВПроверке", Истина));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОтсутствующиеВПроверкеНастройкиОшибок.Добавить(НайденнаяСтрока.КодОшибки);
	КонецЦикла;
	
КонецПроцедуры

// Вывести лог отладки в консоль 
//
// Параметры:
//  ТекстСообщения	 - Строка - сообщение отладки 
//
Процедура Лог_Отладка(ТекстСообщения) Экспорт
	
	Если РежимОтладки Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Вывести лог информации в консоль
//
// Параметры:
//  ТекстСообщения	 - Строка - сообщение с информацией 
//
Процедура Лог_Информация(ТекстСообщения) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "[" + ЛокальнаяДата() + "] acc-export: " + ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Локальная дата с учетом режима работы (клиент / сервер)
// 
// Возвращаемое значение:
//  ДатаВремя - возвращает текущую дату с учетом режима работы 
//
Функция ЛокальнаяДата() Экспорт
	
	#Если Сервер Тогда
	Возврат ТекущаяДатаСеанса();
	#Иначе
	Возврат ТекущаяДата(); // BSLLS:DeprecatedCurrentDate-off
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыборкаОшибокАПК()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	КлассыОшибок.Серьезность КАК Серьезность,
		|	КлассыОшибок.Тип КАК Тип,
		|	КлассыОшибок.ЗатрачиваемыеУсилия КАК ЗатрачиваемыеУсилия,
		|	КлассыОшибок.КодОшибки КАК КодОшибки
		|ПОМЕСТИТЬ КлассыОшибок
		|ИЗ
		|	&КлассыОшибок КАК КлассыОшибок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НайденныеОшибки.Объект КАК Объект,
		|	НайденныеОшибки.Объект.ТипОбъекта КАК ТипОбъекта,
		|	НайденныеОшибки.Объект.Путь КАК Путь,
		|	НайденныеОшибки.Ошибка.Критичность КАК Критичность,
		|	НайденныеОшибки.Ошибка.Наименование КАК ТекстОшибки,
		|	НайденныеОшибки.Ошибка.Код КАК КодОшибки,
		|	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
		|	НайденныеОшибки.Уточнение КАК Уточнение,
		|	НайденныеОшибки.Правило.Наименование КАК Правило,
		|	НайденныеОшибки.Правило КАК ПравилоСсылка,
		|	НайденныеОшибки.Ошибка,
		|	ЕСТЬNULL(КлассыОшибок.Серьезность, """") КАК Серьезность,
		|	ЕСТЬNULL(КлассыОшибок.Тип, """") КАК ТипОшибки,
		|	ЕСТЬNULL(КлассыОшибок.ЗатрачиваемыеУсилия, 0) КАК ЗатрачиваемыеУсилия
		|ИЗ
		|	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ КлассыОшибок КАК КлассыОшибок
		|		ПО НайденныеОшибки.Ошибка.Код = КлассыОшибок.КодОшибки
		|ГДЕ
		|	НайденныеОшибки.Объект.Владелец = &Версия
		|	И НЕ НайденныеОшибки.Состояние = &Особенность";
	Запрос.УстановитьПараметр("КлассыОшибок", КлассыОшибок.Выгрузить());
	Запрос.УстановитьПараметр("Версия", АктуальнаяВерсияКонфигурации(Конфигурация));
	Запрос.УстановитьПараметр("Особенность", Перечисления.СостояниеОшибки.Особенность);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДанных;
	
КонецФункции

Функция АктуальнаяВерсияКонфигурации(КонфигурацияПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроверкаВерсии.ВерсияКонфигурации КАК Версия
		|ИЗ
		|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
		|ГДЕ
		|	ПроверкаВерсии.Конфигурация = &Конфигурация
		|	И ПроверкаВерсии.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроверкаВерсии.Дата УБЫВ";
	Запрос.УстановитьПараметр("Конфигурация", КонфигурацияПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Версии.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Версия;
	
КонецФункции

#Область ДанныеОшибки

Функция ДанныеОшибки(ВыборкаОшибки)
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("Объект", ВыборкаОшибки.Объект);
	СтруктураОшибки.Вставить("ТипОбъекта", ВыборкаОшибки.ТипОбъекта);
	СтруктураОшибки.Вставить("Путь", ВыборкаОшибки.Путь);
	СтруктураОшибки.Вставить("Критичность", ВыборкаОшибки.Критичность);
	СтруктураОшибки.Вставить("ТекстОшибки", ВыборкаОшибки.ТекстОшибки);
	СтруктураОшибки.Вставить("Правило", ВыборкаОшибки.Правило);
	СтруктураОшибки.Вставить("ПравилоСсылка", ВыборкаОшибки.ПравилоСсылка);
	СтруктураОшибки.Вставить("КодОшибки", ВыборкаОшибки.КодОшибки);
	СтруктураОшибки.Вставить("МестоОбнаружения", ВыборкаОшибки.МестоОбнаружения);
	СтруктураОшибки.Вставить("Уточнение", ВыборкаОшибки.Уточнение);
	СтруктураОшибки.Вставить("ОшибкаНаВесьМодуль", Ложь);
	СтруктураОшибки.Вставить("ЭтоОшибкаОбъекта", Ложь);
	СтруктураОшибки.Вставить("Серьезность", ВыборкаОшибки.Серьезность);
	СтруктураОшибки.Вставить("ТипОшибки", ВыборкаОшибки.ТипОшибки);
	СтруктураОшибки.Вставить("ЗатрачиваемыеУсилия", ВыборкаОшибки.ЗатрачиваемыеУсилия);
	
	Если ЗначениеЗаполнено(ВыборкаОшибки.ПравилоСсылка) Тогда
		
		нарушенныеСтандарты = СсылкиНаСтандарты[ВыборкаОшибки.ПравилоСсылка];
		
		Если нарушенныеСтандарты = Неопределено Тогда
			
			нарушенныеСтандарты = Новый Массив;
			
		КонецЕсли;
		
	Иначе
		
		нарушенныеСтандарты = Новый Массив;
		
	КонецЕсли;
	
	СтруктураОшибки.Вставить("НарушенныеСтандарты", СтрСоединить(нарушенныеСтандарты, "  " + Символы.ПС));
	
	Если Не ВыводитьОшибкиОбъектов Тогда
		
		Возврат СтруктураОшибки;
		
	КонецЕсли;
	
	Если МестоОбнаруженияУказываетНаМодуль(СтруктураОшибки.ТипОбъекта, СтруктураОшибки.МестоОбнаружения) Тогда
		
		Возврат СтруктураОшибки;
		
	КонецЕсли;
	
	Если ПеренаправитьНаМодульУправляемогоПриложения(СтруктураОшибки) Тогда
		
		СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация;
		
		Если ЗначениеЗаполнено(СтруктураОшибки.МестоОбнаружения) Тогда
			
			СтруктураОшибки.ТекстОшибки = СтруктураОшибки.ТекстОшибки + ". " + СтруктураОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураОшибки.Путь) Тогда
			
			СтруктураОшибки.ТекстОшибки = СтруктураОшибки.Путь + ". " + СтруктураОшибки.ТекстОшибки;
			
		КонецЕсли;
		
		СтруктураОшибки.МестоОбнаружения = "Модуль управляемого приложения, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульКоманды(СтруктураОшибки) Тогда
		
		СтруктураОшибки.МестоОбнаружения = "Модуль команды, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодуль(СтруктураОшибки) Тогда
		
		СтруктураОшибки.МестоОбнаружения = "Модуль, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульФормы(СтруктураОшибки) Тогда
		
		Если ЗначениеЗаполнено(СтруктураОшибки.МестоОбнаружения) Тогда
			
			СтруктураОшибки.ТекстОшибки = СтруктураОшибки.ТекстОшибки + ". " + СтруктураОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		СтруктураОшибки.МестоОбнаружения = "Модуль, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульОбъекта(СтруктураОшибки) Тогда
		
		Если ЗначениеЗаполнено(СтруктураОшибки.МестоОбнаружения) Тогда
			
			СтруктураОшибки.ТекстОшибки = СтруктураОшибки.ТекстОшибки + ". " + СтруктураОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		СтруктураОшибки.МестоОбнаружения = "Модуль объекта, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульМенеджера(СтруктураОшибки) Тогда
		
		Если ЗначениеЗаполнено(СтруктураОшибки.МестоОбнаружения) Тогда
			
			СтруктураОшибки.ТекстОшибки = СтруктураОшибки.ТекстОшибки + ". " + СтруктураОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		СтруктураОшибки.МестоОбнаружения = "Модуль менеджера, стр. 1";
		
	Иначе
		
		Лог_Информация("Не удалось перенаправить:");
		Лог_Информация("		Текущий объект: " + СтруктураОшибки.Объект);
		Лог_Информация("		Тип объекта: " + СтруктураОшибки.ТипОбъекта);
		Лог_Информация("		Место обнаружения: " + СтруктураОшибки.МестоОбнаружения);
		Лог_Информация("		Текст ошибки: " + СтруктураОшибки.ТекстОшибки);
		Лог_Информация("		Уточнение: " + СтруктураОшибки.Уточнение);
		Лог_Информация("		Путь к объекту: " + СтруктураОшибки.Путь);
		
	КонецЕсли;
	
	ПереопределитьОбъектВОписанииОшибки(СтруктураОшибки);
	
	СтруктураОшибки.Вставить("ОшибкаНаВесьМодуль", Истина);
	СтруктураОшибки.Вставить("ЭтоОшибкаОбъекта", Истина);
	
	Возврат СтруктураОшибки;
	
КонецФункции

Функция ПеренаправитьНаМодульУправляемогоПриложения(Знач ОписаниеОшибки)
	
	Если НужноПеренаправитьНаМодульУправляемогоПриложения(ОписаниеОшибки.ТипОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация
		И ОписаниеОшибки.МестоОбнаружения = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульОбъекта(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Справочник
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Документ
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Обработка
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.БизнесПроцесс
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Задача Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "СПРАВОЧНИКИ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ДОКУМЕНТЫ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ОБРАБОТКИ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "БИЗНЕСПРОЦЕССЫ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ЗАДАЧИ.") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодуль(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМодуль
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.HTTPСервис
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.WebСервис Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульМенеджера(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрСведений
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Отчет
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ОТЧЕТЫ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "РЕГИСТРЫСВЕДЕНИЙ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ПЛАНЫВИДОВХАРАКТЕРИСТИК.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "РЕГИСТРЫНАКОПЛЕНИЯ.") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульКоманды(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Команда Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульФормы(Знач ОписаниеОшибки)
	
	Если (ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Форма
			ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма
			ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяФорма
			Или ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПереопределитьОбъектВОписанииОшибки(Знач СтруктураОшибки)
	
	Пока СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Реквизит
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Графа
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Значение
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Измерение
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Макет
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Ресурс
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть
		ИЛИ СтруктураОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит Цикл
		
		СтруктураОшибки.Объект = СтруктураОшибки.Объект.Родитель;
		СтруктураОшибки.ТипОбъекта = СтруктураОшибки.Объект.ТипОбъекта;
		СтруктураОшибки.Путь = СтруктураОшибки.Объект.Путь;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АбсолютныйПуть

Функция АбсолютныйПутьОбъекта(ТекущийОбъект, ТипОбъекта, МестоОбнаружения, ПутьКОбъекту)
	
	Если Не МестоОбнаруженияУказываетНаМодуль(ТипОбъекта, МестоОбнаружения) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	местоОбнаруженияВРег = ВРег(МестоОбнаружения);
	
	СтрокаПоискаСинонима = ТаблицаСинонимовОбъектов.Найти(ТипОбъекта);
	Значение = "";
	
	Если СтрокаПоискаСинонима <> Неопределено Тогда
		
		ИмяМодуля = "";
		Если СтрНайти(МестоОбнаружения, "Модуль менеджера значения") > 0 Тогда
			ИмяМодуля = "ValueManagerModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль менеджера") > 0 Тогда
			ИмяМодуля = "ManagerModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль обычного приложения") > 0 Тогда
			ИмяМодуля = "OrdinaryApplicationModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль сеанса") > 0 Тогда
			ИмяМодуля = "SessionModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль внешнего соединения") > 0 Тогда
			ИмяМодуля = "ExternalConnectionModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль команды") > 0 Тогда
			ИмяМодуля = "CommandModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль набора записей") > 0 Тогда
			ИмяМодуля = "RecordSetModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль приложения") > 0 Тогда
			ИмяМодуля = "ApplicationModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль управляемого приложения") > 0 Тогда
			ИмяМодуля = "ManagedApplicationModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль объекта") > 0 Тогда
			ИмяМодуля = "ObjectModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль") > 0
			ИЛИ МестоОбнаружения = ""
			ИЛИ местоОбнаруженияВРег = ВРег("в синониме") Тогда
			
			Если ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМодуль
				ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.WebСервис
				ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.HTTPСервис Тогда
				ИмяМодуля = "Module";
			Иначе
				ИмяМодуля = "ObjectModule";
			КонецЕсли;
			
		Иначе
			Лог_Информация("Неопознанный модуль: " + МестоОбнаружения);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяМодуля) Тогда
			
			Значение = АбсолютныйПутьКМодулю(СтрокаПоискаСинонима.СинонимXML, ТекущийОбъект.Наименование, ИмяМодуля, ТипОбъекта);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Форма
		Или ТипОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма Тогда
		
		путьКРодителю = ПолучитьПутьКРодителю(ПутьКОбъекту, ТекущийОбъект);
		
		Если ЗначениеЗаполнено(путьКРодителю) Тогда
			
			Значение = АбсолютныйПутьКМодулюФормы(путьКРодителю + "/Forms", ТекущийОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяФорма
		Или ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма Тогда
		
		Значение = АбсолютныйПутьКМодулюФормы("CommonForms", ТекущийОбъект);
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяКоманда
		И СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("Модуль команды")) Тогда
		
		Значение = АбсолютныйПутьКМодулюКоманды("CommonCommands", ТекущийОбъект);
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Команда
		И СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("Модуль команды")) Тогда
		
		путьКРодителю = ПолучитьПутьКРодителю(ПутьКОбъекту, ТекущийОбъект);
		
		Если ЗначениеЗаполнено(путьКРодителю) Тогда
			
			Значение = АбсолютныйПутьКМодулюКоманды(путьКРодителю, ТекущийОбъект);
			
		КонецЕсли;
		
	ИначеЕсли (СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("имя метода:"))
			И ТипОбъекта = Перечисления.ТипыОбъектов.РегламентноеЗадание)
		ИЛИ (СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("обработчик:"))
			И ТипОбъекта = Перечисления.ТипыОбъектов.ПодпискаНаСобытия) Тогда
			
		КоличествоСимволов = СтрНайти(МестоОбнаружения, ".") - СмещениеПоискаПлатформеннойОшибки; 
		имяМодуля = Сред(МестоОбнаружения, СмещениеПоискаПлатформеннойОшибки, КоличествоСимволов);
		
		Значение = АбсолютныйПутьКМодулю("CommonModules", имяМодуля, "Module", ТипОбъекта);
		
	Иначе
		
		Значение = Неопределено;	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		
		Лог_Информация("Не удалось получить путь для: " + ПутьКОбъекту);
		
	КонецЕсли;
	
	// Заменяем на прямые слешы, т.к. их не придется экранировать в джсоне
	абсолютныйПуть = СтрЗаменить(Значение, "\", "/");
	
	абсолютныйПуть = СтрЗаменить(абсолютныйПуть, "//", "/");
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция АбсолютныйПутьКМодулю(Знач СинонимОбъекта, Знач ИмяМетаданного, Знач ИмяМодуля, Знач ТипОбъекта)
	
	Если ЭтоВыгрузкаEDT Тогда
		
		Если ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация Тогда
			абсолютныйПуть = СтрШаблон("Configuration/%1.bsl", ИмяМодуля);
		Иначе
			абсолютныйПуть = СтрШаблон("%1/%2/%3.bsl", СинонимОбъекта, ИмяМетаданного, ИмяМодуля);
		КонецЕсли;
		
	Иначе
		
		Если ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация Тогда
			абсолютныйПуть = СтрШаблон("Ext/%1.bsl", ИмяМодуля);
		Иначе
			абсолютныйПуть = СтрШаблон("%1/%2/Ext/%3.bsl", СинонимОбъекта, ИмяМетаданного, ИмяМодуля);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция АбсолютныйПутьКМодулюФормы(Знач путьКРодителю, Знач ТекущийОбъект)
	
	Если ЭтоВыгрузкаEDT Тогда
		
		абсолютныйПуть = СтрШаблон("%1/%2/Module.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	Иначе
		
		абсолютныйПуть = СтрШаблон("%1/%2/Ext/Form/Module.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	КонецЕсли;
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция АбсолютныйПутьКМодулюКоманды(Знач путьКРодителю, Знач ТекущийОбъект)
	
	Если ЭтоВыгрузкаEDT Тогда
		
		абсолютныйПуть = СтрШаблон("%1/Commands/%2/CommandModule.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	Иначе
		
		абсолютныйПуть = СтрШаблон("%1/Commands/%2/Ext/CommandModule.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	КонецЕсли;
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция МестоОбнаруженияУказываетНаМодуль(Знач ТипОбъекта, Знач МестоОбнаружения)
	
	местоВРег = ВРег(МестоОбнаружения);
	
	указаниеНаТекст = СтрНайти(местоВРег, ВРег("стр."))
		ИЛИ СтрНайти(местоВРег, ВРег("модуль"))
		ИЛИ СтрНайти(местоВРег, ВРег("имя метода:"))
		ИЛИ СтрНайти(местоВРег, ВРег("обработчик:"));
	
	этоИсключение = СтрНайти(местоВРег, ВРег("Реквизит."))
		ИЛИ СтрНайти(местоВРег, ВРег("Реквизиты."))
		ИЛИ СтрНайти(местоВРег, ВРег("Реквизит формы"))
		ИЛИ СтрНайти(местоВРег, ВРег("Текст макета"))
		ИЛИ СтрНайти(местоВРег, ВРег("Макет"))
		ИЛИ СтрНайти(местоВРег, ВРег("Запрос"))
		ИЛИ СтрНайти(местоВРег, ВРег("НаборыДанных"));
	
	Возврат указаниеНаТекст
	И Не этоИсключение;
	
КонецФункции

Функция ПолучитьПутьКРодителю(Знач ПутьКОбъекту, Знач ТекущийОбъект)
	
	ОбъектРодитель = ТекущийОбъект.Родитель;
	
	СинонимXML = "";
	Для Каждого КлючЗначение Из ИменаОбъектовСФормами Цикл
		
		СтрокаПоиска = Лев(ПутьКОбъекту, СтрДлина(КлючЗначение.Ключ + 1));
		Если СтрокаПоиска = КлючЗначение.Ключ + "." Тогда
			
			СинонимXML = КлючЗначение.Значение;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СинонимXML) Тогда
		
		Лог_Информация("Синоним не найден: " + ПутьКОбъекту);
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат СинонимXML + "/" + ОбъектРодитель.Наименование;
	
КонецФункции

Функция ТаблицаСинонимовОбъектов()
	
	ТаблицаСинонимов = Новый ТаблицаЗначений;
	ТаблицаСинонимов.Колонки.Добавить("ТипОбъекта");
	ТаблицаСинонимов.Колонки.Добавить("Синоним");
	ТаблицаСинонимов.Колонки.Добавить("СинонимXML");
	Возврат ТаблицаСинонимов;
	
КонецФункции

Процедура ДобавитьВТаблицуСинонимов(Таблица, ТипОбъекта, Синоним, СинонимXML)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипОбъекта = ТипОбъекта;
	НоваяСтрока.Синоним = Синоним;
	НоваяСтрока.СинонимXML = СинонимXML;
	
КонецПроцедуры

#КонецОбласти

#Область КомпонентыОшибки

Функция ТекстОшибки(Знач ВыборкаОшибокАПК)
	
	сборкаТекстаОшибки = Новый Массив;
	текстОшибки = СокрЛП(ВыборкаОшибокАПК.ТекстОшибки);
	
	Если ЗначениеЗаполнено(ВыборкаОшибокАПК.Уточнение) Тогда
		
		Если ВыводитьУточнениеВСкобках(ВыборкаОшибокАПК) Тогда
			
			Если СтрЗаканчиваетсяНа(текстОшибки, ".") Тогда
				
				текстОшибки = Лев(текстОшибки, СтрДлина(текстОшибки) - 1);
				
			КонецЕсли;
			
			текстОшибки = текстОшибки + " (" + ВыборкаОшибокАПК.Уточнение + ").";
			
		Иначе
			
			текстОшибки = текстОшибки + Символы.ПС + ВыборкаОшибокАПК.Уточнение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаОшибокАПК.ЭтоОшибкаОбъекта Тогда
		
		текстОшибки = текстОшибки + Символы.ПС + ВыборкаОшибокАПК.Путь;
		
	ИначеЕсли ВыборкаОшибокАПК.ОшибкаНаВесьМодуль Тогда
		
		текстОшибки = текстОшибки + Символы.ПС + ВыборкаОшибокАПК.МестоОбнаружения + Символы.ПС + ВыборкаОшибокАПК.Путь;
		
	Иначе
		
		// Место обнаружения интересно только в случае, если есть подробности после стр. и запятой
		
		индексШаблона = СтрНайти(ВРег(ВыборкаОшибокАПК.МестоОбнаружения), ВРег(ШаблонПоискаУказанияСтроки));
		
		Если индексШаблона > 0 Тогда
			
			стрМестоОбнаружения = Сред(ВыборкаОшибокАПК.МестоОбнаружения, индексШаблона);
			
		Иначе
			
			стрМестоОбнаружения = "";
			
		КонецЕсли;
		
		индексЗапятой = СтрНайти(стрМестоОбнаружения, ",");
		
		Если индексЗапятой > 0 Тогда
			
			текстОшибки = текстОшибки + Символы.ПС + Сред(стрМестоОбнаружения, индексЗапятой + 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаОшибокАПК.НарушенныеСтандарты) Тогда
		
		текстОшибки = текстОшибки + "  " + Символы.ПС + ВыборкаОшибокАПК.НарушенныеСтандарты;
		
	КонецЕсли;
	
	Возврат текстОшибки;
	
КонецФункции

Функция ВыводитьУточнениеВСкобках(Знач ВыборкаОшибокАПК)
	
	массивКодовОшибки = Новый Массив;
	массивКодовОшибки.Добавить("1025");
	массивКодовОшибки.Добавить("1036");
	
	Возврат Не массивКодовОшибки.Найти(КодОшибки(ВыборкаОшибокАПК)) = Неопределено;
	
КонецФункции

Функция ПредставлениеОшибки(Знач ВыборкаОшибокАПК)
	
	Представление = "";
	Если НРег(ФорматПредставленияОшибки) = НРег(ФорматОшибкиТолькоКод) Тогда
		Представление = КодОшибки(ВыборкаОшибокАПК);
	ИначеЕсли НРег(ФорматПредставленияОшибки) = НРег(ФорматОшибкиТолькоНаименование) Тогда
		Представление = ВыборкаОшибокАПК.Правило;
	Иначе // ФорматПредставленияОшибки = ФорматОшибкиКодНаименование
		Представление = "" + КодОшибки(ВыборкаОшибокАПК) + " : " + ВыборкаОшибокАПК.Правило;
	КонецЕсли;
	
	Представление = СтрЗаменить(Представление, ",", "_"); // SonarQube не любит запятые в представлении ошибки
	Представление = Лев(Представление, 200);
	
	Возврат Представление;
	
КонецФункции

Функция КодОшибки(Знач ВыборкаОшибокАПК)
	
	стрКод = ВыборкаОшибокАПК.КодОшибки;
	
	Если Не ЗначениеЗаполнено(стрКод) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	отЧисло = Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	код = отЧисло.ПривестиЗначение(стрКод);
	
	Возврат Формат(код, "ЧН=0; ЧГ=");
	
КонецФункции

Функция ЗначениеКритичностиСтрокой(описаниеОшибки)
	
	Перем Значение;
	
	Если ПустаяСтрока(описаниеОшибки.Серьезность) Тогда
		Если описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Обязательно
			Или описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
			Значение = "Error";
		ИначеЕсли описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Рекомендация Тогда
			Значение = "Hint";
		Иначе
			Значение = "Information";
		КонецЕсли;
	Иначе
		Если описаниеОшибки.Серьезность = "INFO" Тогда
			Значение = "Information";
		ИначеЕсли описаниеОшибки.Серьезность = "MINOR" Тогда
			Значение = "Hint";
		Иначе
			Значение = "Error";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеКритичностиGenericIssue(описаниеОшибки)
	
	Перем Значение;
	
	Если ПустаяСтрока(описаниеОшибки.Серьезность) Тогда
		Если описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Обязательно
			Или описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
			Значение = "CRITICAL";
		Иначе
			Значение = "INFO";
		КонецЕсли;
	Иначе
		Значение = описаниеОшибки.Серьезность;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ТипОшибкиGenericIssue(описаниеОшибки)
	
	Перем Значение;
	
	Если ПустаяСтрока(описаниеОшибки.ТипОшибки) Тогда
		Если описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Обязательно
			Или описаниеОшибки.Критичность = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
			Значение = "BUG";
			Иначе
				Значение = "CODE_SMELL";
		КонецЕсли;
	Иначе
		Значение = описаниеОшибки.ТипОшибки;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

Функция ВыгрузитьОшибкиАПК(РезультатыПроверки, МассивГруппировок)
	
	Если нРег(ФорматЭкспорта) = ФорматЭкспортаGenericIssue Тогда
		Возврат ВыгрузитьОшибкиАПКGenericIssue(РезультатыПроверки, МассивГруппировок);
	Иначе
		Возврат ВыгрузитьОшибкиАПКReportJSON(РезультатыПроверки, МассивГруппировок);
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьОшибкиАПКReportJSON(РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоДляВыгрузки = РезультатыПроверки.НайтиСтроки(Новый Структура("Проверено", Истина)).Количество();
	Лог_Информация("Для выгрузки: " + КоличествоДляВыгрузки + " ошибок");
	
	индикатор = ИндикаторПроцесса(КоличествоДляВыгрузки, "Выгрузка");
	
	КоличествоВыгружено = 0;
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	Запись.ОткрытьФайл(ИмяФайлаРезультата, , , ПараметрыЗаписи);
	
	Запись.ЗаписатьНачалоОбъекта(); // корень
	Запись.ЗаписатьИмяСвойства("date");
	Запись.ЗаписатьЗначение(Формат(ЛокальнаяДата(), "ДФ='yyyy-MM-dd hh:mm:ss'"));
	Запись.ЗаписатьИмяСвойства("fileinfos");
	Запись.ЗаписатьНачалоМассива(); // fileinfos
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		
		СтрокиПроверки = РезультатыПроверки.НайтиСтроки(Новый Структура("АбсолютныйПуть, Проверено", Группировка, Истина));
		
		Если СтрокиПроверки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.ЗаписатьНачалоОбъекта(); // file
		
		Запись.ЗаписатьИмяСвойства("path");
		
		путьКФайлу = "file:///" + КодироватьСтроку(СтрЗаменить(КаталогИсходныхКодов, "\", "/"), СпособКодированияСтроки.URLВКодировкеURL) + "./" + Группировка;
		путьКФайлу = СтрЗаменить(путьКФайлу, "/./", "/");
		
		Запись.ЗаписатьЗначение(путьКФайлу);
		
		Запись.ЗаписатьИмяСвойства("diagnostics");
		Запись.ЗаписатьНачалоМассива(); // diagnostics
		
		Для Каждого СтрокаПроверки Из СтрокиПроверки Цикл
			
			КоличествоВыгружено = КоличествоВыгружено + 1;
			
			ОбработатьИндикатор(индикатор, КоличествоВыгружено);
			
			Запись.ЗаписатьНачалоОбъекта(); // item diagnostics
			Запись.ЗаписатьИмяСвойства("range");
			Запись.ЗаписатьНачалоОбъекта(); // range
			
			Запись.ЗаписатьИмяСвойства("start");
			Запись.ЗаписатьНачалоОбъекта();
			Запись.ЗаписатьИмяСвойства("line");
			Запись.ЗаписатьЗначение(СтрокаПроверки.НачальнаяСтрока - 1);
			Запись.ЗаписатьИмяСвойства("character");
			Запись.ЗаписатьЗначение(СтрокаПроверки.НачальнаяКолонка - 1);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьИмяСвойства("end");
			Запись.ЗаписатьНачалоОбъекта();
			Запись.ЗаписатьИмяСвойства("line");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КонечнаяСтрока - 1);
			Запись.ЗаписатьИмяСвойства("character");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КонечнаяКолонка - 1); // нужно определять длину строки
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьКонецОбъекта(); // range
			
			// severity
			Запись.ЗаписатьИмяСвойства("severity");
			Запись.ЗаписатьЗначение(СтрокаПроверки.Статус);
			
			// code
			Запись.ЗаписатьИмяСвойства("code");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КодОшибки);
			
			// source
			Запись.ЗаписатьИмяСвойства("source");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ИсточникПроверки);
			
			// message
			Запись.ЗаписатьИмяСвойства("message");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ТекстОшибки);
			
			// relatedInformation
			Запись.ЗаписатьИмяСвойства("relatedInformation");
			Запись.ЗаписатьЗначение(Неопределено);
			Запись.ЗаписатьКонецОбъекта(); // item diagnostics
			
		КонецЦикла;
		
		Запись.ЗаписатьКонецМассива(); // diagnostics
		Запись.ЗаписатьКонецОбъекта(); // file
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива(); // fileinfos
	Запись.ЗаписатьКонецОбъекта(); // корень
	Запись.Закрыть();
	
	Лог_Информация("Файл с ошибками создан: " + ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьОшибкиАПКGenericIssue(РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоВыгружено = 0;
	
	КоличествоДляВыгрузки = РезультатыПроверки.НайтиСтроки(Новый Структура("Проверено", Истина)).Количество();
	Лог_Информация(СтрШаблон("Для выгрузки: %1 ошибок", КоличествоДляВыгрузки));
	
	Индикатор = ИндикаторПроцесса(КоличествоДляВыгрузки, "Выгрузка");
	
	данныеКЗаписи = Новый Структура;
	
	данныеКЗаписи.Вставить("issues", Новый Массив);
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		
		СтрокиПроверки = РезультатыПроверки.НайтиСтроки(Новый Структура("АбсолютныйПуть, ФайлНайден", Группировка, Истина));
		
		Для Каждого СтрокаПроверки Из СтрокиПроверки Цикл
			
			КоличествоВыгружено = КоличествоВыгружено + 1;
			ОбработатьИндикатор(Индикатор, КоличествоВыгружено);
			
			issue = Новый Структура;
			issue.Вставить("engineId", СтрокаПроверки.ИсточникПроверки);
			issue.Вставить("ruleId", СтрокаПроверки.КодОшибки);
			issue.Вставить("severity", СтрокаПроверки.Статус);
			issue.Вставить("type", СтрокаПроверки.ТипОшибки);
			
			primaryLocation = Новый Структура;
			primaryLocation.Вставить("message", СтрокаПроверки.ТекстОшибки);
			
			Если ВыводитьОтносительныеПути Тогда
				путьКФайлу = ОтносительныйКаталогИсходныхКодов + "/" + Группировка;
			Иначе
				путьКФайлу = "" + СтрЗаменить(КаталогИсходныхКодов, "\", "/") + "./" + Группировка;
			КонецЕсли;
			
			путьКФайлу = СтрЗаменить(путьКФайлу, "/./", "/");
			
			primaryLocation.Вставить("filePath", путьКФайлу);
			
			Если СтрокаПроверки.Проверено
				И Не СтрокаПроверки.ОшибкаНаВесьМодуль Тогда
				
				textRange = Новый Структура;
				textRange.Вставить("startLine", СтрокаПроверки.НачальнаяСтрока);
				textRange.Вставить("endLine", СтрокаПроверки.КонечнаяСтрока);
				
				Если СтрокаПроверки.НачальнаяКолонка < СтрокаПроверки.КонечнаяКолонка Тогда
					
					textRange.Вставить("startColumn", СтрокаПроверки.НачальнаяКолонка);
					textRange.Вставить("endColumn", СтрокаПроверки.КонечнаяКолонка);
					
				КонецЕсли;
				
				primaryLocation.Вставить("textRange", textRange);
				
			КонецЕсли;
			
			issue.Вставить("primaryLocation", primaryLocation);
			issue.Вставить("effortMinutes", СтрокаПроверки.ЗатрачиваемыеУсилия);
			
			данныеКЗаписи.issues.Добавить(issue);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВыгружатьПравила Тогда
		
		данныеКЗаписи.Вставить("rules", МассивПравил(РезультатыПроверки));
		
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	ЗаписьJSON.ОткрытьФайл(ИмяФайлаРезультата, , , ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, данныеКЗаписи);
	ЗаписьJSON.Закрыть();
	
	Лог_Информация("Файл с ошибками создан: " + ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьОшибкиАПК(РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоДляОбработки = РезультатыПроверки.Количество();
	КоличествоОбработано = 0;
	КоличествоПроверено = 0;
	
	индикатор = ИндикаторПроцесса(КоличествоДляОбработки, "Обработано");
	
	Для Каждого ПутьКОбъекту Из МассивГруппировок Цикл
		
		НайденныеСтроки = РезультатыПроверки.НайтиСтроки(Новый Структура("АбсолютныйПуть", ПутьКОбъекту));
		
		ПутьКФайлу = СтрЗаменить(КаталогИсходныхКодов + ПолучитьРазделительПути() + ПутьКОбъекту, "/", "\");
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "\\", "\");
		
		Файл = Новый Файл(ПутьКФайлу);
		Существует = Файл.Существует();
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Если Существует Тогда
			ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		Иначе
			Лог_Информация("Файл не существует: " + Файл.ПолноеИмя);
		КонецЕсли;
		
		ПроверкаПройдена = Существует;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			КоличествоОбработано = КоличествоОбработано + 1;
			
			ОбработатьИндикатор(индикатор, КоличествоОбработано);
			
			Если ПроверкаПройдена Тогда
				
				НайденнаяСтрока.ФайлНайден = Истина;
				
				Если НайденнаяСтрока.ОшибкаНаВесьМодуль Тогда
					
					ПроверкаПройдена = Ложь;
					КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
					Для НомерСтроки = 1 По КоличествоСтрок Цикл
						
						СтрокаИзСодержимого = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
						ДлинаСтроки = СтрДлина(СтрокаИзСодержимого);
						Если ДлинаСтроки > 0 Тогда
							
							ПроверкаПройдена = Истина;
							НачальныйУказатель = 1;
							КонечныйУказатель = НачальныйУказатель + ДлинаСтроки;
							НайденнаяСтрока.НачальнаяСтрока = НомерСтроки;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;					
					
				Иначе
					
					// в некоторых файлах почему то идет сдвиг - 1
					// например Catalogs/БанковскиеСчета/Forms/ФормаЭлемента/Ext/Form/Module.bsl
					
					Если ТекстовыйДокумент.КоличествоСтрок() < НайденнаяСтрока.НачальнаяСтрока Тогда
						
						НайденнаяСтрока.ОшибкаНаВесьМодуль = Истина;
						
					КонецЕсли;
					
					СтрокаИзСодержимого = ТекстовыйДокумент.ПолучитьСтроку(НайденнаяСтрока.НачальнаяСтрока);
					ДлинаСтроки = СтрДлина(СтрокаИзСодержимого);
					Если ДлинаСтроки = 0 Тогда
						ПроверкаПройдена = Ложь;
						Лог_Отладка("Проверка не пройдена для: " + ПутьКФайлу);
						Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
					ИначеЕсли ПустаяСтрока(СтрокаИзСодержимого) Тогда
						НачальныйУказатель = 1;
						КонечныйУказатель = НачальныйУказатель + ДлинаСтроки;
					Иначе
						
						СодержимоеСтроки = СокрЛП(СтрокаИзСодержимого);
						НачальныйУказатель = СтрНайти(СтрокаИзСодержимого, СодержимоеСтроки);
						КонечныйУказатель = 1;
						Если НачальныйУказатель > 0 Тогда
							
							КонечныйУказатель = НачальныйУказатель + СтрДлина(СодержимоеСтроки);
							Если КонечныйУказатель = 0 Тогда // предположим что это пустая строка
								
								Лог_Отладка("КонечныйУказатель = 0. Установлена ошибка на весь модуль: " + ПутьКОбъекту);
								Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
								Лог_Отладка("		Содержимое строки: " + СодержимоеСтроки);
								
								КонечныйУказатель = 1;
							КонецЕсли;
							
							Если НачальныйУказатель = КонечныйУказатель Тогда
								Если КонечныйУказатель = 1 Тогда
									
									Лог_Отладка("НачальныйУказатель = КонечныйУказатель. Установлена ошибка на весь модуль: " + ПутьКОбъекту);
									Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
									Лог_Отладка("		Содержимое строки: " + СодержимоеСтроки);
									
								Иначе
									НачальныйУказатель = НачальныйУказатель - 1;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							ПроверкаПройдена = Ложь;
							Лог_Отладка("Проверка не пройдена для: " + ПутьКФайлу);
							Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПроверкаПройдена Тогда
					
					НайденнаяСтрока.НачальнаяКолонка = НачальныйУказатель;
					НайденнаяСтрока.КонечнаяКолонка = КонечныйУказатель;
					НайденнаяСтрока.КонечнаяСтрока = НайденнаяСтрока.НачальнаяСтрока;
					
					КоличествоПроверено = КоличествоПроверено + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НайденнаяСтрока.Проверено = ПроверкаПройдена;
			
		КонецЦикла;
		
		ТекстовыйДокумент = Неопределено;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкиАПК(ВыборкаОшибокАПК, РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоОшибокОбщее = ВыборкаОшибокАПК.Количество();
	Лог_Информация("Ошибок к подготовке: " + КоличествоОшибокОбщее);
	
	КоличествоОшибок = 0;
	КоличествоОбработано = 0;
	
	индикатор = ИндикаторПроцесса(КоличествоОшибокОбщее, "Подготовлено");
	
	Пока ВыборкаОшибокАПК.Следующий() Цикл
		
		КоличествоОшибок = КоличествоОшибок + 1;
		
		ОбработатьИндикатор(индикатор, КоличествоОшибок);
		
		описаниеОшибки = ДанныеОшибки(ВыборкаОшибокАПК);
		
		АбсолютныйПуть = АбсолютныйПутьОбъекта(
				описаниеОшибки.Объект,
				описаниеОшибки.ТипОбъекта,
				описаниеОшибки.МестоОбнаружения,
				описаниеОшибки.Путь);
		
		// Нет пути к исходнику - нет смысл обрабатывать дальше
		Если ПустаяСтрока(АбсолютныйПуть) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СокрЛП(описаниеОшибки.Серьезность)) = "SKIP" Тогда
			// Ошибка помечена пропускаемой при выгрузке
			Продолжить;
		КонецЕсли;
		
		ОшибкаНаВесьМодуль = описаниеОшибки.ОшибкаНаВесьМодуль;
		
		МестоОбнаруженияСтроки = 1;
		МестоОбнаруженияКолонки = 1;
		ПозицияВТексте = СтрНайти(описаниеОшибки.МестоОбнаружения, ШаблонПоискаУказанияСтроки);
		
		Если ПозицияВТексте > 0 Тогда
			
			Смещение = СтрДлина(описаниеОшибки.МестоОбнаружения) - ПозицияВТексте - ДлинаШаблонаПоискаУказанияСтроки;
			ЧастьСтроки = Прав(описаниеОшибки.МестоОбнаружения, Смещение);
			
			индексЗапятой = СтрНайти(ЧастьСтроки, ",");
			
			Если индексЗапятой > 0 Тогда
				
				ЧастьСтроки = Лев(ЧастьСтроки, индексЗапятой - 1);
				
			КонецЕсли;
			
			от = Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
			
			МестоОбнаруженияСтроки = от.ПривестиЗначение(СокрЛП(ЧастьСтроки));
			
			Если МестоОбнаруженияСтроки = 0 Тогда
				МестоОбнаруженияСтроки = 1;
			КонецЕсли;
			
		Иначе
			
			ЕстьСовпадение = Ложь;
			Для Каждого ЭлементПоиска Из ИменаВидовМодулей Цикл
				Если СтрНайти(ВРег(описаниеОшибки.МестоОбнаружения), ВРег(ЭлементПоиска)) > 0 Тогда
					ЕстьСовпадение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьСовпадение Тогда
				
				ОшибкаНаВесьМодуль = Истина;
				
				МестоОбнаруженияСтроки = 1;
				МестоОбнаруженияКолонки = 1;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = РезультатыПроверки.Добавить();
		Результат.Объект = описаниеОшибки.Объект;
		Результат.АбсолютныйПуть = АбсолютныйПуть;
		Результат.Путь = описаниеОшибки.Путь;
		Результат.ФайлНайден = Ложь;
		Результат.ТекстОшибки = ТекстОшибки(описаниеОшибки);
		Результат.КодОшибки = ПредставлениеОшибки(описаниеОшибки);
		
		Результат.НачальнаяСтрока = МестоОбнаруженияСтроки;
		Результат.НачальнаяКолонка = МестоОбнаруженияКолонки;
		
		Если МассивГруппировок.Найти(Результат.АбсолютныйПуть) = Неопределено Тогда
			МассивГруппировок.Добавить(Результат.АбсолютныйПуть);
		КонецЕсли;
		
		Если нРег(ФорматЭкспорта) = ФорматЭкспортаGenericIssue Тогда
			Результат.Статус = ЗначениеКритичностиGenericIssue(описаниеОшибки);
			Результат.ТипОшибки = ТипОшибкиGenericIssue(описаниеОшибки);
		Иначе
			Результат.Статус = ЗначениеКритичностиСтрокой(описаниеОшибки);
			Результат.ТипОшибки = "";
		КонецЕсли;
		Результат.ИсточникПроверки = ИсточникПроверки;
		Результат.ОшибкаНаВесьМодуль = ОшибкаНаВесьМодуль;
		
		ЗаполнитьОписанияОшибкиИзПравила(Результат, ВыборкаОшибокАПК);
		
		КоличествоОбработано = КоличествоОбработано + 1;
		
	КонецЦикла;
	
	Лог_Информация("Подготовлено ошибок: " + КоличествоОбработано);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыПроверки()
	
	РезультатыПроверки = Новый ТаблицаЗначений;
	РезультатыПроверки.Колонки.Добавить("Объект");
	РезультатыПроверки.Колонки.Добавить("АбсолютныйПуть");
	РезультатыПроверки.Колонки.Добавить("Путь");
	РезультатыПроверки.Колонки.Добавить("ТекстОшибки");
	РезультатыПроверки.Колонки.Добавить("КодОшибки");
	РезультатыПроверки.Колонки.Добавить("НачальнаяСтрока");
	РезультатыПроверки.Колонки.Добавить("НачальнаяКолонка");
	РезультатыПроверки.Колонки.Добавить("КонечнаяСтрока");
	РезультатыПроверки.Колонки.Добавить("КонечнаяКолонка");
	РезультатыПроверки.Колонки.Добавить("Статус");
	РезультатыПроверки.Колонки.Добавить("ТипОшибки");
	РезультатыПроверки.Колонки.Добавить("ИсточникПроверки");
	РезультатыПроверки.Колонки.Добавить("ФайлНайден");
	РезультатыПроверки.Колонки.Добавить("Проверено");
	РезультатыПроверки.Колонки.Добавить("ОшибкаНаВесьМодуль");
	РезультатыПроверки.Колонки.Добавить("Ошибка");
	РезультатыПроверки.Колонки.Добавить("НаименованиеОшибки");
	РезультатыПроверки.Колонки.Добавить("ОписаниеОшибки");
	РезультатыПроверки.Колонки.Добавить("ЗатрачиваемыеУсилия");
	Возврат РезультатыПроверки;
	
КонецФункции

#Область ВыгрузкаПравил

Функция МассивПравил(пРезультатыПроверки)
	
	тз = пРезультатыПроверки.Скопировать(Новый Структура("Проверено", Истина));
	тз.Свернуть("НаименованиеОшибки,ОписаниеОшибки,ИсточникПроверки,КодОшибки,Статус,ТипОшибки");
	
	массивПравил = Новый Массив;
	
	Для каждого цСтрока Из тз Цикл
		
		Если ЗначениеЗаполнено(цСтрока.НаименованиеОшибки)
			И ЗначениеЗаполнено(цСтрока.ОписаниеОшибки) Тогда
			
			правило = Новый Структура;
			правило.Вставить("engineId", цСтрока.ИсточникПроверки);
			правило.Вставить("ruleId", цСтрока.КодОшибки);
			правило.Вставить("name", цСтрока.НаименованиеОшибки);
			правило.Вставить("severity", цСтрока.Статус);
			правило.Вставить("description", цСтрока.ОписаниеОшибки);
			правило.Вставить("type", цСтрока.ТипОшибки);
			
			массивПравил.Добавить(правило);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат массивПравил;
	
КонецФункции

Процедура ЗаполнитьОписанияОшибкиИзПравила(пСтрокаРезультата, Знач пВыборка)
	
	Если Не ВыгружатьПравила Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пВыборка.Ошибка) Тогда
		Возврат;
	КонецЕсли;
	
	пСтрокаРезультата.Ошибка = пВыборка.Ошибка;
	пСтрокаРезультата.НаименованиеОшибки = Строка(пВыборка.Ошибка);
	
	массивОписаний = Новый Массив;
	
	Для каждого цТребование Из ОписанияОшибок.НайтиСтроки(Новый Структура("Ошибка", пВыборка.Ошибка)) Цикл
		
		Если Не ЗначениеЗаполнено(цТребование.Описание) Тогда
			Продолжить;
		КонецЕсли;
		
		текОписание = цТребование.Описание;
		
		Если ЗначениеЗаполнено(цТребование.СсылкаНаСтандарт) Тогда
			
			текОписание = СтрЗаменить(текОписание, "#std", "<a href=""https://its.1c.ru/db/v8std#content:456:hdoc:1"">#std</a>");
			
		КонецЕсли;
		
		массивОписаний.Добавить(текОписание);
		
	КонецЦикла;
	
	пСтрокаРезультата.ОписаниеОшибки = СтрСоединить(массивОписаний, Символы.ПС + Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#Область КлассификацияОшибок

Функция СформироватьТаблицуКлассификации()
	
	длинаКода = Метаданные.Справочники.ОбнаруживаемыеОшибки.ДлинаКода;
	
	// Сформируем таблицу классификации.
	ТаблицаКлассификации = Новый ТаблицаЗначений;
	ТаблицаКлассификации.Колонки.Добавить("Серьезность", 
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));
	ТаблицаКлассификации.Колонки.Добавить("Тип", 
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаКлассификации.Колонки.Добавить("ЗатрачиваемыеУсилия", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКлассификации.Колонки.Добавить("КодОшибки", 
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(длинаКода, ДопустимаяДлина.Переменная)));
	ТаблицаКлассификации.Колонки.Добавить("НаименованиеОшибки", 
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	
	Возврат ТаблицаКлассификации;
	
КонецФункции

Процедура ПрочитатьФайлКлассификацииВТаблицу(ТаблицаКлассификации)
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла(".csv");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаКлассификацииВоВременномХранилище);
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	ЧтениеФайлаКлассификации = Новый ТекстовыйДокумент;
	ЧтениеФайлаКлассификации.Прочитать(ПутьКФайлу, КодировкаТекста.ANSI);
	
	Для Сч = 1 По ЧтениеФайлаКлассификации.КоличествоСтрок() Цикл
		
		ТекСтрока = ЧтениеФайлаКлассификации.ПолучитьСтроку(Сч);
		Значения = СтрРазделить(ТекСтрока, ";");
		НоваяСтрока = ТаблицаКлассификации.Добавить();
		Индекс = 0;
		Для Каждого Колонка Из ТаблицаКлассификации.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = Значения.Получить(Индекс);
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьФайлы(ПутьКФайлу);
	
КонецПроцедуры

Функция ОбъединитьНастройкиКлассификацииСПроверками(ТаблицаКлассификации)
	
	длинаКода = Метаданные.Справочники.ОбнаруживаемыеОшибки.ДлинаКода;
	
	Для каждого цСтрокаКласса Из ТаблицаКлассификации Цикл
		
		цСтрокаКласса.КодОшибки = Лев(цСтрокаКласса.КодОшибки + "                    ", длинаКода);
		
	КонецЦикла;
	
	// ТаблицаКлассификации         - Сформирую пакет запроса по данным таблицы классификации.
	// Итоговый объединенный запрос - Получим все ошибки,анализируемые в текущем варианте проверки конфигурации,
	//                                дополним их данными Таблицы классификации и настройками ошибок,
	//                                отсустствующими в текущем варианте проверки.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаКлассификации.Серьезность КАК Серьезность,
		|	ТаблицаКлассификации.Тип КАК Тип,
		|	ТаблицаКлассификации.ЗатрачиваемыеУсилия КАК ЗатрачиваемыеУсилия,
		|	ТаблицаКлассификации.КодОшибки КАК КодОшибки,
		|	ТаблицаКлассификации.НаименованиеОшибки КАК НаименованиеОшибки
		|ПОМЕСТИТЬ ТаблицаКлассификации
		|ИЗ
		|	&ТаблицаКлассификации КАК ТаблицаКлассификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаКлассификации.Серьезность, """") КАК Серьезность,
		|	ЕСТЬNULL(ТаблицаКлассификации.Тип, """") КАК Тип,
		|	ЕСТЬNULL(ТаблицаКлассификации.ЗатрачиваемыеУсилия, 0) КАК ЗатрачиваемыеУсилия,
		|	ТребованияККонфигурации.Ошибка.Код КАК КодОшибки,
		|	ТребованияККонфигурации.Ошибка.Наименование КАК НаименованиеОшибки,
		|	ЛОЖЬ КАК ОтсутствуетВПроверке
		|ИЗ
		|	РегистрСведений.ТребованияККонфигурации КАК ТребованияККонфигурации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКлассификации КАК ТаблицаКлассификации
		|		ПО ТребованияККонфигурации.Ошибка.Код = ТаблицаКлассификации.КодОшибки
		|ГДЕ
		|	ТребованияККонфигурации.Конфигурация = &Конфигурация
		|	И ТребованияККонфигурации.ВариантПроверки = &ВариантПроверки
		|	И ТребованияККонфигурации.Ошибка <> ЗНАЧЕНИЕ(Справочник.ОбнаруживаемыеОшибки.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ТаблицаКлассификации.Серьезность, """"),
		|	ТребованияККонфигурации.Ошибка.Наименование,
		|	ТребованияККонфигурации.Ошибка.Код,
		|	ЕСТЬNULL(ТаблицаКлассификации.Тип, """"),
		|	ЕСТЬNULL(ТаблицаКлассификации.ЗатрачиваемыеУсилия, 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаКлассификации.Серьезность,
		|	ТаблицаКлассификации.Тип,
		|	ТаблицаКлассификации.ЗатрачиваемыеУсилия,
		|	ТаблицаКлассификации.КодОшибки,
		|	ЕСТЬNULL(ОбнаруживаемыеОшибки.Наименование, ТаблицаКлассификации.НаименованиеОшибки),
		|	ИСТИНА
		|ИЗ
		|	ТаблицаКлассификации КАК ТаблицаКлассификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТребованияККонфигурации КАК ТребованияККонфигурации
		|		ПО ТаблицаКлассификации.КодОшибки = ТребованияККонфигурации.Ошибка.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбнаруживаемыеОшибки КАК ОбнаруживаемыеОшибки
		|		ПО ТаблицаКлассификации.КодОшибки = ОбнаруживаемыеОшибки.Код
		|ГДЕ
		|	ТребованияККонфигурации.Ошибка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеОшибки";
	
	Запрос.УстановитьПараметр("ТаблицаКлассификации", ТаблицаКлассификации);
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ВариантПроверки", Конфигурация.ВариантПроверкиВручную);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИндикаторПроцесса(Знач КоличествоПроходов, Знач ПредставлениеПроцесса)
	
	Индикатор = Новый Структура;
	
	Индикатор.Вставить("КоличествоПроходов", КоличествоПроходов);
	Индикатор.Вставить("ПредставлениеПроцесса", ПредставлениеПроцесса);
	
	Индикатор.Вставить("ДатаНачалаПроцесса", ЛокальнаяДата());
	
	Индикатор.Вставить("МинимальныйПериодОбновления", 1);
	Индикатор.Вставить("ДатаСледующегоОбновления", Дата('00010101'));
	
	Возврат Индикатор;
	
КонецФункции

Процедура ОбработатьИндикатор(Индикатор, Счетчик = 0)
	
	#Если Клиент Тогда
	
	ОбработкаПрерыванияПользователя();
	
	ОбновитьИндикатор = Истина;
	ТекущаяДата = ЛокальнаяДата();
	Если ТекущаяДата >= Индикатор.ДатаСледующегоОбновления Тогда
		Индикатор.ДатаСледующегоОбновления = ТекущаяДата + Индикатор.МинимальныйПериодОбновления;
	Иначе
		ОбновитьИндикатор = Ложь;
	КонецЕсли;
	
	Если ОбновитьИндикатор Тогда
		
		ТекущаяДата = ЛокальнаяДата();
		ПрошлоВремени = ТекущаяДата - Индикатор.ДатаНачалаПроцесса;
		Осталось = ПрошлоВремени * (Индикатор.КоличествоПроходов / Счетчик - 1);
		Часов = Цел(Осталось / КоличествоСекундВЧасе);
		Осталось = Осталось - (Часов * КоличествоСекундВЧасе);
		Минут = Цел(Осталось / КоличествоСекундВМинуте);
		Секунд = Цел(Цел(Осталось - (Минут * КоличествоСекундВМинуте)));
		ОсталосьВремени = Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":"
			+ Формат(Минут, "ЧЦ=2; ЧН=00; ЧВН=") + ":"
			+ Формат(Секунд, "ЧЦ=2; ЧН=00; ЧВН=");
		ТекстОсталось = "Осталось: ~" + ОсталосьВремени;
		
		ТекстСостояния = Индикатор.ПредставлениеПроцесса + " "
			+ Формат(Счетчик / Индикатор.КоличествоПроходов * МаксимальноеЗначениеПрогрессБара, "ЧЦ=3; ЧДЦ=0") 
			+ "%  " + ТекстОсталось;
		
		Состояние(ТекстСостояния);
		
	КонецЕсли;
	
	Если Счетчик = Индикатор.КоличествоПроходов Тогда
		Состояние("");
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

Функция НужноПеренаправитьНаМодульУправляемогоПриложения(ТипОбъекта)
	
	Возврат ТипОбъекта = Перечисления.ТипыОбъектов.Роль
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.Подсистема
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ПараметрСеанса
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийРеквизит
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.КритерийОтбора
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ПодпискаНаСобытия
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.РегламентноеЗадание
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ФункциональнаяОпция
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ПараметрФункциональнойОпции
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ОпределяемыйТип
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ХранилищеНастроек
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяКоманда
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ГруппаКоманд
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.Интерфейс
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМакет
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.Картинка
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ПакетXDTO
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.WSСсылка
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ЭлементСтиля
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.Константа
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.Перечисление
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ПланОбмена
		ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.ЖурналДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ЭтоВыгрузкаEDT = Ложь;

ИсточникПроверки = "acc-rules";
ШаблонПоискаУказанияСтроки = "стр.";
ДлинаШаблонаПоискаУказанияСтроки = СтрДлина(ШаблонПоискаУказанияСтроки);

ФорматЭкспортаReportJSON = нРег("ReportJSON");
ФорматЭкспортаGenericIssue = нРег("GenericIssue");

ФорматОшибкиТолькоКод = "code";
ФорматОшибкиТолькоНаименование = "name";
ФорматОшибкиКодНаименование = "codename";

МаксимальноеЗначениеПрогрессБара = 100;
КоличествоСекундВЧасе = 3600;
КоличествоСекундВМинуте = 60;
СмещениеПоискаПлатформеннойОшибки = 13;

ВерсияОбработки = "1.3.0";

#КонецОбласти
