#Область ОписаниеПеременных

Перем ИменаВидовМодулей;
Перем ИменаОбъектовСФормами;
Перем ИсточникПроверки;
Перем ТаблицаСинонимовОбъектов;
Перем ШаблонПоискаУказанияСтроки;
Перем ДлинаШаблонаПоискаУказанияСтроки;

Перем СсылкиНаСтандарты;

Перем ФорматЭкспортаReportJSON Экспорт;
Перем ФорматЭкспортаGenericIssue Экспорт;
Перем ВерсияОбработки Экспорт;

Перем ЭтоВыгрузкаEDT Экспорт;

Перем ФорматОшибкиТолькоКод Экспорт;
Перем ФорматОшибкиТолькоНаименование Экспорт;
Перем ФорматОшибкиКодНаименование Экспорт;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ИнициализироватьПервичныеДанные() Экспорт
	
	ИменаВидовМодулей = Новый Массив;
	ИменаВидовМодулей.Добавить("Модуль объекта");
	ИменаВидовМодулей.Добавить("Модуль менеджера");
	ИменаВидовМодулей.Добавить("Модуль обычного приложения");
	ИменаВидовМодулей.Добавить("Модуль сеанса");
	ИменаВидовМодулей.Добавить("Модуль внешнего соединения");
	ИменаВидовМодулей.Добавить("Модуль команды");
	ИменаВидовМодулей.Добавить("Модуль менеджера значения");
	ИменаВидовМодулей.Добавить("Модуль набора записей");
	ИменаВидовМодулей.Добавить("Модуль приложения");
	ИменаВидовМодулей.Добавить("Модуль управляемого приложения");
	ИменаВидовМодулей.Добавить("Модуль");
	
	
	ИменаОбъектовСФормами = Новый Соответствие;
	ИменаОбъектовСФормами.Вставить("Обработки", "DataProcessors");
	ИменаОбъектовСФормами.Вставить("Отчеты", "Reports");
	ИменаОбъектовСФормами.Вставить("Справочники", "Catalogs");
	ИменаОбъектовСФормами.Вставить("Документы", "Documents");
	ИменаОбъектовСФормами.Вставить("Общие.ПланыОбмена", "ExchangePlans");
	ИменаОбъектовСФормами.Вставить("Общие.ХранилищаНастроек", "SettingsStorages");
	ИменаОбъектовСФормами.Вставить("Задачи", "Tasks");
	ИменаОбъектовСФормами.Вставить("ЖурналыДокументов", "DocumentJournals");
	ИменаОбъектовСФормами.Вставить("ПланыВидовХарактеристик", "ChartsOfCharacteristicTypes");
	ИменаОбъектовСФормами.Вставить("БизнесПроцессы", "BusinessProcesses");
	ИменаОбъектовСФормами.Вставить("РегистрыНакопления", "AccumulationRegisters");
	ИменаОбъектовСФормами.Вставить("РегистрыСведений", "InformationRegisters");
	ИменаОбъектовСФормами.Вставить("РегистрыРасчета", "CalculationRegisters");
	ИменаОбъектовСФормами.Вставить("РегистрыБухгалтерии", "AccountingRegisters");
	ИменаОбъектовСФормами.Вставить("ПланыСчетов", "ChartsOfAccounts");
	ИменаОбъектовСФормами.Вставить("Перечисления", "Enums");
	
	ТаблицаСинонимовОбъектов = ТаблицаСинонимовОбъектов();
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Конфигурация, "", "");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ОбщийМодуль, "Общие.ОбщиеМодули", "CommonModules");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланОбмена, "Общие.ПланыОбмена", "ExchangePlans");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.КритерийОтбора, "Общие.КритерииОтбора", "FilterCriteria");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ХранилищеНастроек, "Общие.ХранилищаНастроек", "SettingsStorages");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ОбщаяКоманда, "Общие.ОбщиеКоманды", "CommonCommands");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.WebСервис, "Общие.WebСервисы", "WebServices");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.HTTPСервис, "Общие.HTTPСервисы", "HTTPServices");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Константа, "Констант", "Constants");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Справочник, "Справочник", "Catalogs");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Документ, "Документы", "Documents");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ЖурналДокументов, "ЖурналыДокументов", "DocumentJournals");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Перечисление, "Перечисления", "Enums");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Отчет, "Отчеты", "Reports");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Обработка, "Обработки", "DataProcessors");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланВидовХарактеристик, "ПланыВидовХарактеристик", "ChartsOfCharacteristicTypes");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланСчетов, "ПланыСчетов", "ChartsOfAccounts");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.ПланВидовРасчета, "ПланыВидовРасчета", "ChartsOfCalculationTypes");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрСведений, "РегистрыСведений", "InformationRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрНакопления, "РегистрыНакопления", "AccumulationRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрБухгалтерии, "РегистрыБухгалтерии", "AccountingRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.РегистрРасчета, "РегистрыРасчета", "CalculationRegisters");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.БизнесПроцесс, "БизнесПроцессы", "BusinessProcesses");
	ДобавитьВТаблицуСинонимов(ТаблицаСинонимовОбъектов, Перечисления.ТипыОбъектов.Задача, "Задачи", "Tasks");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТребованияРеализацияТребования.ПравилоПроверки КАК ПравилоПроверки,
		|	ТребованияРеализацияТребования.Ссылка.СсылкаНаСтандарт КАК СсылкаНаСтандарт
		|ИЗ
		|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
		|ИТОГИ ПО
		|	ПравилоПроверки";
	
	выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СсылкиНаСтандарты = Новый Соответствие;
	
	Пока выборка.Следующий() Цикл
		
		правило = выборка.ПравилоПроверки;
		массивСтандартов = Новый Массив;
		
		выборкаДетЗаписей = выборка.Выбрать();
		
		Пока выборкаДетЗаписей.Следующий() Цикл
			
			массивСтандартов.Добавить(выборкаДетЗаписей.СсылкаНаСтандарт);
			
		КонецЦикла;
		
		СсылкиНаСтандарты.Вставить(правило, массивСтандартов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭкспортироватьОшибкиАПК() Экспорт
	
	ВыборкаОшибокАПК = ВыборкаОшибокАПК();
	
	Если ВыборкаОшибокАПК = Неопределено Тогда
		Лог_Отладка("Нет данных для выгрузки");
		Возврат;
	КонецЕсли;
	
	РезультатыПроверки = РезультатыПроверки();
	МассивГруппировок = Новый Массив;
	
	ОбработатьОшибкиАПК(ВыборкаОшибокАПК, РезультатыПроверки, МассивГруппировок);
	ПодготовитьОшибкиАПК(РезультатыПроверки, МассивГруппировок);
	ВыгрузитьОшибкиАПК(РезультатыПроверки, МассивГруппировок);
	
КонецПроцедуры

Процедура Лог_Отладка(ТекстСообщения) Экспорт
	
	Если РежимОтладки Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыборкаОшибокАПК()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НайденныеОшибки.Объект КАК Объект,
	               |	НайденныеОшибки.Объект.ТипОбъекта КАК ТипОбъекта,
	               |	НайденныеОшибки.Объект.Путь КАК Путь,
	               |	НайденныеОшибки.Ошибка.Критичность КАК Критичность,
	               |	НайденныеОшибки.Ошибка.Наименование КАК ТекстОшибки,
	               |	НайденныеОшибки.Ошибка.Код КАК КодОшибки,
	               |	НайденныеОшибки.МестоОбнаружения КАК МестоОбнаружения,
	               |	НайденныеОшибки.Уточнение КАК Уточнение,
	               |	НайденныеОшибки.Правило.Наименование КАК Правило,
	               |	НайденныеОшибки.Правило КАК ПравилоСсылка
	               |ИЗ
	               |	РегистрСведений.НайденныеОшибки КАК НайденныеОшибки
	               |ГДЕ
	               |	НайденныеОшибки.Объект.Владелец = &Версия
	               |	И НЕ НайденныеОшибки.Состояние = &Особенность";
	Запрос.УстановитьПараметр("Версия", АктуальнаяВерсияКонфигурации(Конфигурация));
	Запрос.УстановитьПараметр("Особенность", Перечисления.СостояниеОшибки.Особенность);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДанных;
	
КонецФункции

Функция АктуальнаяВерсияКонфигурации(КонфигурацияПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроверкаВерсии.ВерсияКонфигурации КАК Версия
		|ИЗ
		|	Документ.ПроверкаВерсии КАК ПроверкаВерсии
		|ГДЕ
		|	ПроверкаВерсии.Конфигурация = &Конфигурация
		|	И ПроверкаВерсии.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроверкаВерсии.Дата УБЫВ";
	Запрос.УстановитьПараметр("Конфигурация", КонфигурацияПоиска);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Версии.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Версия;
	
КонецФункции

#Область ДанныеОшибки

Функция ДанныеОшибки(ВыборкаОшибки)
	
	структОшибки = Новый Структура;
	структОшибки.Вставить("Объект", ВыборкаОшибки.Объект);
	структОшибки.Вставить("ТипОбъекта", ВыборкаОшибки.ТипОбъекта);
	структОшибки.Вставить("Путь", ВыборкаОшибки.Путь);
	структОшибки.Вставить("Критичность", ВыборкаОшибки.Критичность);
	структОшибки.Вставить("ТекстОшибки", ВыборкаОшибки.ТекстОшибки);
	структОшибки.Вставить("Правило", ВыборкаОшибки.Правило);
	структОшибки.Вставить("ПравилоСсылка", ВыборкаОшибки.ПравилоСсылка);
	структОшибки.Вставить("КодОшибки", ВыборкаОшибки.КодОшибки);
	структОшибки.Вставить("МестоОбнаружения", ВыборкаОшибки.МестоОбнаружения);
	структОшибки.Вставить("Уточнение", ВыборкаОшибки.Уточнение);
	структОшибки.Вставить("ОшибкаНаВесьМодуль", Ложь);
	структОшибки.Вставить("ЭтоОшибкаОбъекта", Ложь);
	
	Если ЗначениеЗаполнено(ВыборкаОшибки.ПравилоСсылка) Тогда
		
		нарушенныеСтандарты = СсылкиНаСтандарты[ВыборкаОшибки.ПравилоСсылка];
		
		Если нарушенныеСтандарты = Неопределено Тогда
			
			нарушенныеСтандарты = Новый Массив;
			
		КонецЕсли;
		
	Иначе
		
		нарушенныеСтандарты = Новый Массив;
		
	КонецЕсли;
	
	структОшибки.Вставить("НарушенныеСтандарты", СтрСоединить(нарушенныеСтандарты, "  " + Символы.ПС));
	
	Если Не ВыводитьОшибкиОбъектов Тогда
		
		Возврат структОшибки;
		
	КонецЕсли;
	
	Если МестоОбнаруженияУказываетНаМодуль(структОшибки.ТипОбъекта, структОшибки.МестоОбнаружения) Тогда
		
		Возврат структОшибки;
		
	КонецЕсли;
	
	Если ПеренаправитьНаМодульУправляемогоПриложения(структОшибки) Тогда
		
		структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация;
		
		Если ЗначениеЗаполнено(структОшибки.МестоОбнаружения) Тогда
			
			структОшибки.ТекстОшибки = структОшибки.ТекстОшибки + ". " + структОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(структОшибки.Путь) Тогда
			
			структОшибки.ТекстОшибки = структОшибки.Путь + ". " + структОшибки.ТекстОшибки;
			
		КонецЕсли;
		
		структОшибки.МестоОбнаружения = "Модуль управляемого приложения, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульКоманды(структОшибки) Тогда
		
		структОшибки.МестоОбнаружения = "Модуль команды, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодуль(структОшибки) Тогда
		
		структОшибки.МестоОбнаружения = "Модуль, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульФормы(структОшибки) Тогда
		
		Если ЗначениеЗаполнено(структОшибки.МестоОбнаружения) Тогда
			
			структОшибки.ТекстОшибки = структОшибки.ТекстОшибки + ". " + структОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		структОшибки.МестоОбнаружения = "Модуль, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульОбъекта(структОшибки) Тогда
		
		Если ЗначениеЗаполнено(структОшибки.МестоОбнаружения) Тогда
			
			структОшибки.ТекстОшибки = структОшибки.ТекстОшибки + ". " + структОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		структОшибки.МестоОбнаружения = "Модуль объекта, стр. 1";
		
	ИначеЕсли ПеренаправитьНаМодульМенеджера(структОшибки) Тогда
		
		Если ЗначениеЗаполнено(структОшибки.МестоОбнаружения) Тогда
			
			структОшибки.ТекстОшибки = структОшибки.ТекстОшибки + ". " + структОшибки.МестоОбнаружения;
			
		КонецЕсли;
		
		структОшибки.МестоОбнаружения = "Модуль менеджера, стр. 1";
		
	ИначеЕсли ПеренаправлятьНекуда(структОшибки) Тогда
		
		Лог_Отладка("Не удалось обнаружить место замечания. Содержание замечания: " + структОшибки.ТекстОшибки);
		
	Иначе
		
		Лог_Отладка("Не удалось перенаправить:");
		Лог_Отладка("		Текущий объект: " + структОшибки.Объект);
		Лог_Отладка("		Тип объекта: " + структОшибки.ТипОбъекта);
		Лог_Отладка("		Место обнаружения: " + структОшибки.МестоОбнаружения);
		Лог_Отладка("		Текст ошибки: " + структОшибки.ТекстОшибки);
		Лог_Отладка("		Уточнение: " + структОшибки.Уточнение);
		Лог_Отладка("		Путь к объекту: " + структОшибки.Путь);
		
	КонецЕсли;
	
	ПереопределитьОбъектВОписанииОшибки(структОшибки);
	
	структОшибки.Вставить("ОшибкаНаВесьМодуль", Истина);
	структОшибки.Вставить("ЭтоОшибкаОбъекта", Истина);
	
	Возврат структОшибки;
	
КонецФункции

Функция ПеренаправитьНаМодульУправляемогоПриложения(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Роль
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Подсистема
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПараметрСеанса
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийРеквизит
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.КритерийОтбора
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПодпискаНаСобытия
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.РегламентноеЗадание
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ФункциональнаяОпция
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПараметрФункциональнойОпции
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОпределяемыйТип
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ХранилищеНастроек
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяКоманда
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ГруппаКоманд
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Интерфейс
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМакет
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Картинка
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПакетXDTO
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.WSСсылка
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ЭлементСтиля
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Константа Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация
		И ОписаниеОшибки.МестоОбнаружения = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульОбъекта(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Справочник
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Документ
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Обработка
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.БизнесПроцесс
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Задача Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "СПРАВОЧНИКИ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ДОКУМЕНТЫ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ОБРАБОТКИ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "БИЗНЕСПРОЦЕССЫ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ЗАДАЧИ.") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодуль(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМодуль
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.HTTPСервис
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.WebСервис Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульМенеджера(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрСведений
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Отчет
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПланВидовХарактеристик
		ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.РегистрНакопления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ОТЧЕТЫ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "РЕГИСТРЫСВЕДЕНИЙ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ПЛАНЫВИДОВХАРАКТЕРИСТИК.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "РЕГИСТРЫНАКОПЛЕНИЯ.") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульКоманды(Знач ОписаниеОшибки)
	
	Если ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Команда Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправитьНаМодульФормы(Знач ОписаниеОшибки)
	
	Если (ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Форма
			ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма
			ИЛИ ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяФорма
			Или ОписаниеОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПеренаправлятьНекуда(Знач ОписаниеОшибки)
	
	Если СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ПЕРЕЧИСЛЕНИЯ.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ОБЩИЕ.ПЛАНЫОБМЕНА.")
		ИЛИ СтрНачинаетсяС(ВРег(ОписаниеОшибки.Путь), "ЖУРНАЛЫДОКУМЕНТОВ.") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПереопределитьОбъектВОписанииОшибки(Знач структОшибки)
	
	Пока структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Реквизит
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ТабличнаяЧасть
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.ПредопределенныйЭлемент
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Графа
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Значение
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Измерение
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Макет
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.Ресурс
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.СтандартнаяТабличнаяЧасть
		ИЛИ структОшибки.ТипОбъекта = Перечисления.ТипыОбъектов.СтандартныйРеквизит Цикл
		
		структОшибки.Объект = структОшибки.Объект.Родитель;
		структОшибки.ТипОбъекта = структОшибки.Объект.ТипОбъекта;
		структОшибки.Путь = структОшибки.Объект.Путь;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АбсолютныйПуть

Функция АбсолютныйПутьОбъекта(ТекущийОбъект, ТипОбъекта, МестоОбнаружения, ПутьКОбъекту)
	
	Если Не МестоОбнаруженияУказываетНаМодуль(ТипОбъекта, МестоОбнаружения) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	местоОбнаруженияВРег = ВРег(МестоОбнаружения);
	
	СтрокаПоискаСинонима = ТаблицаСинонимовОбъектов.Найти(ТипОбъекта);
	Значение = "";
	
	Если СтрокаПоискаСинонима <> Неопределено Тогда
		
		ИмяМодуля = "";
		Если СтрНайти(МестоОбнаружения, "Модуль менеджера значения") > 0 Тогда
			ИмяМодуля = "ValueManagerModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль менеджера") > 0 Тогда
			ИмяМодуля = "ManagerModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль обычного приложения") > 0 Тогда
			ИмяМодуля = "OrdinaryApplicationModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль сеанса") > 0 Тогда
			ИмяМодуля = "SessionModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль внешнего соединения") > 0 Тогда
			ИмяМодуля = "ExternalConnectionModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль команды") > 0 Тогда
			ИмяМодуля = "CommandModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль набора записей") > 0 Тогда
			ИмяМодуля = "RecordSetModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль приложения") > 0 Тогда
			ИмяМодуля = "ApplicationModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль управляемого приложения") > 0 Тогда
			ИмяМодуля = "ManagedApplicationModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль объекта") > 0 Тогда
			ИмяМодуля = "ObjectModule";
		ИначеЕсли СтрНайти(МестоОбнаружения, "Модуль") > 0
			ИЛИ МестоОбнаружения = ""
			ИЛИ местоОбнаруженияВРег = ВРег("в синониме") Тогда
			
			Если ТипОбъекта = Перечисления.ТипыОбъектов.ОбщийМодуль
				ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.WebСервис
				ИЛИ ТипОбъекта = Перечисления.ТипыОбъектов.HTTPСервис Тогда
				ИмяМодуля = "Module";
			Иначе
				ИмяМодуля = "ObjectModule";
			КонецЕсли;
			
		Иначе
			Лог_Отладка("Неопознаный модуль: " + МестоОбнаружения);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяМодуля) Тогда
			
			Значение = АбсолютныйПутьКМодулю(СтрокаПоискаСинонима.СинонимXML, ТекущийОбъект.Наименование, ИмяМодуля, ТипОбъекта);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Форма
		Или ТипОбъекта = Перечисления.ТипыОбъектов.УправляемаяФорма Тогда
		
		путьКРодителю = ПолучитьПутьКРодителю(ПутьКОбъекту, ТекущийОбъект);
		
		Если ЗначениеЗаполнено(путьКРодителю) Тогда
			
			Значение = АбсолютныйПутьКМодулюФормы(путьКРодителю + "/Forms", ТекущийОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяФорма
		Или ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяУправляемаяФорма Тогда
		
		Значение = АбсолютныйПутьКМодулюФормы("CommonForms", ТекущийОбъект);
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.ОбщаяКоманда
		И СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("Модуль команды")) Тогда
		
		Значение = АбсолютныйПутьКМодулюКомадны("CommonCommands", ТекущийОбъект);
		
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектов.Команда
		И СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("Модуль команды")) Тогда
		
		путьКРодителю = ПолучитьПутьКРодителю(ПутьКОбъекту, ТекущийОбъект);
		
		Если ЗначениеЗаполнено(путьКРодителю) Тогда
			
			Значение = АбсолютныйПутьКМодулюКомадны(путьКРодителю, ТекущийОбъект);
			
		КонецЕсли;
		
	ИначеЕсли (СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("имя метода:"))
			И ТипОбъекта = Перечисления.ТипыОбъектов.РегламентноеЗадание)
		ИЛИ (СтрНачинаетсяС(местоОбнаруженияВРег, ВРег("обработчик:"))
			И ТипОбъекта = Перечисления.ТипыОбъектов.ПодпискаНаСобытия) Тогда
		
		имяМодуля = Сред(МестоОбнаружения, 13, СтрНайти(МестоОбнаружения, ".") - 13);
		
		Значение = АбсолютныйПутьКМодулю("CommonModules", имяМодуля, "Module", ТипОбъекта);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		
		Лог_Отладка("Не удалось получить путь для: " + ПутьКОбъекту);
		
	КонецЕсли;
	
	абсолютныйПуть = СтрЗаменить(Значение, "\", "/"); // Заменяем на прямые слешы, т.к. их не придется экранировать в джсоне
	
	абсолютныйПуть = СтрЗаменить(абсолютныйПуть, "//", "/");
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция АбсолютныйПутьКМодулю(Знач СинонимОбъекта, Знач ИмяМетаданного, Знач ИмяМодуля, Знач ТипОбъекта)
	
	Если ЭтоВыгрузкаEDT Тогда
		
		Если ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация Тогда
			абсолютныйПуть = СтрШаблон("Configuration/%1.bsl", ИмяМодуля);
		Иначе
			абсолютныйПуть = СтрШаблон("%1/%2/%3.bsl", СинонимОбъекта, ИмяМетаданного, ИмяМодуля);
		КонецЕсли;
		
	Иначе
		
		Если ТипОбъекта = Перечисления.ТипыОбъектов.Конфигурация Тогда
			абсолютныйПуть = СтрШаблон("Ext/%1.bsl", ИмяМодуля);
		Иначе
			абсолютныйПуть = СтрШаблон("%1/%2/Ext/%3.bsl", СинонимОбъекта, ИмяМетаданного, ИмяМодуля);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция АбсолютныйПутьКМодулюФормы(Знач путьКРодителю, Знач ТекущийОбъект)
	
	Если ЭтоВыгрузкаEDT Тогда
		
		абсолютныйПуть = СтрШаблон("%1/%2/Module.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	Иначе
		
		абсолютныйПуть = СтрШаблон("%1/%2/Ext/Form/Module.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	КонецЕсли;
	
	Возврат абсолютныйПуть;
	
КонецФункции

Функция АбсолютныйПутьКМодулюКомадны(Знач путьКРодителю, Знач ТекущийОбъект)
	
	Если ЭтоВыгрузкаEDT Тогда
		
		абсолютныйПуть = СтрШаблон("%1/Commands/%2/CommandModule.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	Иначе
		
		абсолютныйПуть = СтрШаблон("%1/Commands/%2/Ext/CommandModule.bsl", путьКРодителю, ТекущийОбъект.Наименование);
		
	КонецЕсли;
	
	Возврат абсолютныйПуть;
	
КонецФункции


Функция МестоОбнаруженияУказываетНаМодуль(Знач ТипОбъекта, Знач МестоОбнаружения)
	
	местоВРег = ВРег(МестоОбнаружения);
	
	указаниеНаТекст = СтрНайти(местоВРег, ВРег("стр."))
		ИЛИ СтрНайти(местоВРег, ВРег("модуль"))
		ИЛИ СтрНайти(местоВРег, ВРег("имя метода:"))
		ИЛИ СтрНайти(местоВРег, ВРег("обработчик:"));
	
	этоИсключение = СтрНайти(местоВРег, ВРег("Реквизит."))
		ИЛИ СтрНайти(местоВРег, ВРег("Реквизиты."))
		ИЛИ СтрНайти(местоВРег, ВРег("Реквизит формы"))
		ИЛИ СтрНайти(местоВРег, ВРег("Текст макета"))
		ИЛИ СтрНайти(местоВРег, ВРег("Макет"))
		ИЛИ СтрНайти(местоВРег, ВРег("Запрос"))
		ИЛИ СтрНайти(местоВРег, ВРег("НаборыДанных"));
	
	Возврат указаниеНаТекст
	И Не этоИсключение;
	
КонецФункции

Функция ПолучитьПутьКРодителю(Знач ПутьКОбъекту, Знач ТекущийОбъект)
	
	ОбъектРодитель = ТекущийОбъект.Родитель;
	
	СинонимXML = "";
	Для Каждого КлючЗначение Из ИменаОбъектовСФормами Цикл
		
		СтрокаПоиска = Лев(ПутьКОбъекту, СтрДлина(КлючЗначение.Ключ + 1));
		Если СтрокаПоиска = КлючЗначение.Ключ + "." Тогда
			
			СинонимXML = КлючЗначение.Значение;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СинонимXML) Тогда
		
		Лог_Отладка("Синоним не найден: " + ПутьКОбъекту);
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат СинонимXML + "/" + ОбъектРодитель.Наименование;
	
КонецФункции

Функция ТаблицаСинонимовОбъектов()
	
	ТаблицаСинонимов = Новый ТаблицаЗначений;
	ТаблицаСинонимов.Колонки.Добавить("ТипОбъекта");
	ТаблицаСинонимов.Колонки.Добавить("Синоним");
	ТаблицаСинонимов.Колонки.Добавить("СинонимXML");
	Возврат ТаблицаСинонимов;
	
КонецФункции

Процедура ДобавитьВТаблицуСинонимов(Таблица, ТипОбъекта, Синоним, СинонимXML)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ТипОбъекта = ТипОбъекта;
	НоваяСтрока.Синоним = Синоним;
	НоваяСтрока.СинонимXML = СинонимXML;
	
КонецПроцедуры

#КонецОбласти

#Область КомпонентыОшибки

Функция ТекстОшибки(Знач ВыборкаОшибокАПК)
	
	сборкаТекстаОшибки = Новый Массив;
	текстОшибки = СокрЛП(ВыборкаОшибокАПК.ТекстОшибки);
	
	Если ЗначениеЗаполнено(ВыборкаОшибокАПК.Уточнение) Тогда
		
		Если ВыводитьУточнениеВСкобках(ВыборкаОшибокАПК) Тогда
			
			Если СтрЗаканчиваетсяНа(текстОшибки, ".") Тогда
				
				текстОшибки = Лев(текстОшибки, СтрДлина(текстОшибки) - 1);
				
			КонецЕсли;
			
			текстОшибки = текстОшибки + " (" + ВыборкаОшибокАПК.Уточнение + ").";
			
		Иначе
			
			текстОшибки = текстОшибки + Символы.ПС + ВыборкаОшибокАПК.Уточнение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаОшибокАПК.ЭтоОшибкаОбъекта Тогда
		
		текстОшибки = текстОшибки + Символы.ПС + ВыборкаОшибокАПК.Путь;
		
	ИначеЕсли ВыборкаОшибокАПК.ОшибкаНаВесьМодуль Тогда
		
		текстОшибки = текстОшибки + Символы.ПС + ВыборкаОшибокАПК.МестоОбнаружения + Символы.ПС + ВыборкаОшибокАПК.Путь;
		
	Иначе
		
		// Место обнаружения интересно только в случае, если есть подробности после стр. и запятой
		
		индексШаблона = СтрНайти(ВРег(ВыборкаОшибокАПК.МестоОбнаружения), ВРег(ШаблонПоискаУказанияСтроки));
		
		Если индексШаблона > 0 Тогда
			
			стрМестоОбнаружения = Сред(ВыборкаОшибокАПК.МестоОбнаружения, индексШаблона);
			
		Иначе
			
			стрМестоОбнаружения = "";
			
		КонецЕсли;
		
		индексЗапятой = СтрНайти(стрМестоОбнаружения, ",");
		
		Если индексЗапятой > 0 Тогда
			
			текстОшибки = текстОшибки + Символы.ПС + Сред(стрМестоОбнаружения, индексЗапятой + 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаОшибокАПК.НарушенныеСтандарты) Тогда
		
		текстОшибки = текстОшибки + "  " + Символы.ПС + ВыборкаОшибокАПК.НарушенныеСтандарты;
		
	КонецЕсли;
	
	Возврат текстОшибки;
	
КонецФункции

Функция ВыводитьУточнениеВСкобках(Знач ВыборкаОшибокАПК)
	
	массивКодовОшибки = Новый Массив;
	массивКодовОшибки.Добавить("1025");
	массивКодовОшибки.Добавить("1036");
	
	Возврат Не массивКодовОшибки.Найти(КодОшибки(ВыборкаОшибокАПК)) = Неопределено;
	
КонецФункции

Функция ПредставлениеОшибки(Знач ВыборкаОшибокАПК)
	
	Представление = "";
	Если НРег(ФорматПредставленияОшибки) = НРег(ФорматОшибкиТолькоКод) Тогда
		Представление = КодОшибки(ВыборкаОшибокАПК);
	ИначеЕсли НРег(ФорматПредставленияОшибки) = НРег(ФорматОшибкиТолькоНаименование) Тогда
		Представление = ВыборкаОшибокАПК.Правило;
	Иначе // ФорматПредставленияОшибки = ФорматОшибкиКодНаименование
		Представление = "" + КодОшибки(ВыборкаОшибокАПК) + " : " + ВыборкаОшибокАПК.Правило;
	КонецЕсли;
	
	Представление = СтрЗаменить(Представление, ",", "_"); // SonarQube не любит запятые в представлении ошибки
	Представление = Лев(Представление, 200);
	
	Возврат Представление;
	
КонецФункции

Функция КодОшибки(Знач ВыборкаОшибокАПК)
	
	стрКод = ВыборкаОшибокАПК.КодОшибки;
	
	Если Не ЗначениеЗаполнено(стрКод) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	отЧисло = Новый ОписаниеТипов("Число",
			Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	код = отЧисло.ПривестиЗначение(стрКод);
	
	Возврат Формат(код, "ЧН=0; ЧГ=");
	
КонецФункции

Функция ЗначениеКритичностиСтрокой(ВходящееЗначение)
	
	Перем Значение;
	
	Если ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Обязательно
		Или ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
		Значение = "Error";
	ИначеЕсли ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Рекомендация Тогда
		Значение = "Hint";
	Иначе
		Значение = "Information";
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеКритичностиGenericIssue(ВходящееЗначение)
	
	Перем Значение;
	
	Если ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Обязательно
		Или ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
		Значение = "CRITICAL";
	Иначе
		Значение = "INFO";
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ТипОшибкиGenericIssue(ВходящееЗначение)
	
	Перем Значение;
	
	Если ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Обязательно
		Или ВходящееЗначение = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
		Значение = "BUG";
	Иначе
		Значение = "CODE_SMELL";
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

Функция ВыгрузитьОшибкиАПК(РезультатыПроверки, МассивГруппировок)
	
	Если нРег(ФорматЭкспорта) = ФорматЭкспортаGenericIssue Тогда
		Возврат ВыгрузитьОшибкиАПКGenericIssue(РезультатыПроверки, МассивГруппировок);
	Иначе
		Возврат ВыгрузитьОшибкиАПКReportJSON(РезультатыПроверки, МассивГруппировок);
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьОшибкиАПКReportJSON(РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоДляВыгрузки = РезультатыПроверки.НайтиСтроки(Новый Структура("Проверено", Истина)).Количество();
	Лог_Отладка("Для выгрузки: " + КоличествоДляВыгрузки + " ошибок");
	
	индикатор = ИндикаторПроцесса(КоличествоДляВыгрузки, "Выгрузка");
	
	КоличествоВыгружено = 0;
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	Запись.ОткрытьФайл(ИмяФайлаРезультата, , , ПараметрыЗаписи);
	
	Запись.ЗаписатьНачалоОбъекта(); // корень
	Запись.ЗаписатьИмяСвойства("date");
	Запись.ЗаписатьЗначение(Формат(ТекущаяДата(), "ДФ='yyyy-MM-dd hh:mm:ss'"));
	Запись.ЗаписатьИмяСвойства("fileinfos");
	Запись.ЗаписатьНачалоМассива(); // fileinfos
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		
		СтрокиПроверки = РезультатыПроверки.НайтиСтроки(Новый Структура("АбсолютныйПуть, Проверено", Группировка, Истина));
		
		Если СтрокиПроверки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.ЗаписатьНачалоОбъекта(); // file
		
		Запись.ЗаписатьИмяСвойства("path");
		
		путьКФайлу = "file:///" + СтрЗаменить(КаталогИсходныхКодов, "\", "/") + "./" + Группировка;
		путьКФайлу = СтрЗаменить(путьКФайлу, "/./", "/");
		
		Запись.ЗаписатьЗначение(путьКФайлу);
		
		Запись.ЗаписатьИмяСвойства("diagnostics");
		Запись.ЗаписатьНачалоМассива(); // diagnostics
		
		Для Каждого СтрокаПроверки Из СтрокиПроверки Цикл
			
			КоличествоВыгружено = КоличествоВыгружено + 1;
			
			ОбработатьИндикатор(индикатор, КоличествоВыгружено);
			
			Запись.ЗаписатьНачалоОбъекта(); // item diagnostics	
			Запись.ЗаписатьИмяСвойства("range");
			Запись.ЗаписатьНачалоОбъекта(); // range
			
			Запись.ЗаписатьИмяСвойства("start");
			Запись.ЗаписатьНачалоОбъекта();
			Запись.ЗаписатьИмяСвойства("line");
			Запись.ЗаписатьЗначение(СтрокаПроверки.НачальнаяСтрока - 1);
			Запись.ЗаписатьИмяСвойства("character");
			Запись.ЗаписатьЗначение(СтрокаПроверки.НачальнаяКолонка - 1);
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьИмяСвойства("end");
			Запись.ЗаписатьНачалоОбъекта();
			Запись.ЗаписатьИмяСвойства("line");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КонечнаяСтрока - 1);
			Запись.ЗаписатьИмяСвойства("character");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КонечнаяКолонка - 1); // нужно определять длину строки
			Запись.ЗаписатьКонецОбъекта();
			
			Запись.ЗаписатьКонецОбъекта(); // range
			
			// severity
			Запись.ЗаписатьИмяСвойства("severity");
			Запись.ЗаписатьЗначение(СтрокаПроверки.Статус);
			
			// code
			Запись.ЗаписатьИмяСвойства("code");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КодОшибки);
			
			// source
			Запись.ЗаписатьИмяСвойства("source");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ИсточникПроверки);
			
			// message
			Запись.ЗаписатьИмяСвойства("message");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ТекстОшибки);
			
			// relatedInformation
			Запись.ЗаписатьИмяСвойства("relatedInformation");
			Запись.ЗаписатьЗначение(Неопределено);
			Запись.ЗаписатьКонецОбъекта(); // item diagnostics
			
		КонецЦикла;
		
		Запись.ЗаписатьКонецМассива(); // diagnostics	
		Запись.ЗаписатьКонецОбъекта(); // file
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива(); // fileinfos
	Запись.ЗаписатьКонецОбъекта(); // корень
	Запись.Закрыть();
	
	Лог_Отладка("Файл с ошибками создан: " + ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьОшибкиАПКGenericIssue(РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоВыгружено = 0;
	
	КоличествоДляВыгрузки = РезультатыПроверки.НайтиСтроки(Новый Структура("Проверено", Истина)).Количество();
	Лог_Отладка(СтрШаблон("Для выгрузки: %1 ошибок", КоличествоДляВыгрузки));
	
	Индикатор = ИндикаторПроцесса(КоличествоДляВыгрузки, "Выгрузка");
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	Запись.ОткрытьФайл(ИмяФайлаРезультата, , , ПараметрыЗаписи);
	
	Запись.ЗаписатьНачалоОбъекта(); // корень
	
	Запись.ЗаписатьИмяСвойства("issues");
	Запись.ЗаписатьНачалоМассива(); // issues
	
	Для Каждого Группировка Из МассивГруппировок Цикл
		
		СтрокиПроверки = РезультатыПроверки.НайтиСтроки(Новый Структура("АбсолютныйПуть, ФайлНайден", Группировка, Истина));
		
		Если СтрокиПроверки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПроверки Из СтрокиПроверки Цикл
			
			КоличествоВыгружено = КоличествоВыгружено + 1;
			ОбработатьИндикатор(Индикатор, КоличествоВыгружено);
			
			Запись.ЗаписатьНачалоОбъекта(); // issue
			Запись.ЗаписатьИмяСвойства("engineId");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ИсточникПроверки);
			
			Запись.ЗаписатьИмяСвойства("ruleId");
			Запись.ЗаписатьЗначение(СтрокаПроверки.КодОшибки);
			
			Запись.ЗаписатьИмяСвойства("severity");
			Запись.ЗаписатьЗначение(СтрокаПроверки.Статус);
			
			Запись.ЗаписатьИмяСвойства("type");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ТипОшибки);
			
			Запись.ЗаписатьИмяСвойства("primaryLocation");
			Запись.ЗаписатьНачалоОбъекта(); // primaryLocation
			
			Запись.ЗаписатьИмяСвойства("message");
			Запись.ЗаписатьЗначение(СтрокаПроверки.ТекстОшибки);
			
			Запись.ЗаписатьИмяСвойства("filePath");
			
			Если ВыводитьОтносительныеПути Тогда
				путьКФайлу = ОтносительныйКаталогИсходныхКодов + "/" + Группировка;
			Иначе
				путьКФайлу = "" + СтрЗаменить(КаталогИсходныхКодов, "\", "/") + "./" + Группировка;
			КонецЕсли;
			
			путьКФайлу = СтрЗаменить(путьКФайлу, "/./", "/");
			
			Запись.ЗаписатьЗначение(путьКФайлу);
			
			Если СтрокаПроверки.Проверено И Не СтрокаПроверки.ОшибкаНаВесьМодуль Тогда
				
				Запись.ЗаписатьИмяСвойства("textRange");
				Запись.ЗаписатьНачалоОбъекта(); // textRange
				
				Запись.ЗаписатьИмяСвойства("startLine");
				Запись.ЗаписатьЗначение(СтрокаПроверки.НачальнаяСтрока);
				
				Запись.ЗаписатьИмяСвойства("endLine");
				Запись.ЗаписатьЗначение(СтрокаПроверки.КонечнаяСтрока);
				
				Если СтрокаПроверки.НачальнаяКолонка < СтрокаПроверки.КонечнаяКолонка Тогда
					
					Запись.ЗаписатьИмяСвойства("startColumn");
					Запись.ЗаписатьЗначение(СтрокаПроверки.НачальнаяКолонка);
					
					Запись.ЗаписатьИмяСвойства("endColumn");
					Запись.ЗаписатьЗначение(СтрокаПроверки.КонечнаяКолонка);
					
				КонецЕсли;
				
				Запись.ЗаписатьКонецОбъекта(); // textRange
				
			КонецЕсли;
			
			Запись.ЗаписатьКонецОбъекта(); // primaryLocation
			
			Запись.ЗаписатьИмяСвойства("effortMinutes");
			Запись.ЗаписатьЗначение(0);
			
			Запись.ЗаписатьКонецОбъекта(); // issue	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецМассива(); // issues
	
	Запись.ЗаписатьКонецОбъекта(); // корень
	Запись.Закрыть();
	
	Лог_Отладка("Файл с ошибками создан: " + ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьОшибкиАПК(РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоДляОбработки = РезультатыПроверки.Количество();
	КоличествоОбработано = 0;
	КоличествоПроверено = 0;
	
	индикатор = ИндикаторПроцесса(КоличествоДляОбработки, "Обработано");
	
	Для Каждого ПутьКОбъекту Из МассивГруппировок Цикл
		
		НайденныеСтроки = РезультатыПроверки.НайтиСтроки(Новый Структура("АбсолютныйПуть", ПутьКОбъекту));
		
		ПутьКФайлу = СтрЗаменить(КаталогИсходныхКодов + ПолучитьРазделительПути() + ПутьКОбъекту, "/", "\");
		ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "\\", "\");
		
		Файл = Новый Файл(ПутьКФайлу);
		Существует = Файл.Существует();
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Если Существует Тогда
			ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		Иначе
			Лог_Отладка("Файл не существует: " + Файл.ПолноеИмя);
		КонецЕсли;
		
		ПроверкаПройдена = Существует;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			КоличествоОбработано = КоличествоОбработано + 1;
			
			ОбработатьИндикатор(индикатор, КоличествоОбработано);
			
			Если ПроверкаПройдена Тогда
				
				НайденнаяСтрока.ФайлНайден = Истина;
				
				Если НайденнаяСтрока.ОшибкаНаВесьМодуль Тогда
					
					ПроверкаПройдена = Ложь;
					КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
					Для НомерСтроки = 1 По КоличествоСтрок Цикл
						
						СтрокаИзСодержимого = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
						ДлинаСтроки = СтрДлина(СтрокаИзСодержимого);
						Если ДлинаСтроки > 0 Тогда
							
							ПроверкаПройдена = Истина;
							НачальныйУказатель = 1;
							КонечныйУказатель = ДлинаСтроки;
							НайденнаяСтрока.НачальнаяСтрока = НомерСтроки;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					
				Иначе
					
					// в некоторых файлах почему то идет сдвиг - 1
					// например Catalogs/БанковскиеСчета/Forms/ФормаЭлемента/Ext/Form/Module.bsl
					
					Если ТекстовыйДокумент.КоличествоСтрок() < НайденнаяСтрока.НачальнаяСтрока Тогда
						
						НайденнаяСтрока.ОшибкаНаВесьМодуль = Истина;
						
					КонецЕсли;
					
					СтрокаИзСодержимого = ТекстовыйДокумент.ПолучитьСтроку(НайденнаяСтрока.НачальнаяСтрока);
					ДлинаСтроки = СтрДлина(СтрокаИзСодержимого);
					СодержимоеСтроки = СокрЛП(СтрокаИзСодержимого);
					НачальныйУказатель = СтрНайти(СтрокаИзСодержимого, СодержимоеСтроки);
					КонечныйУказатель = 1;
					
					Если НачальныйУказатель > 0 И ДлинаСтроки <> 0 Тогда
						
						КонечныйУказатель = НачальныйУказатель + СтрДлина(СодержимоеСтроки) - 1;
						Если КонечныйУказатель = 0 Тогда // предположим что это пустая строка
							
							Лог_Отладка("КонечныйУказатель = 0. Установлена ошибка на весь модуль: " + ПутьКОбъекту);
							Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
							Лог_Отладка("		Содержимое строки: " + СодержимоеСтроки);
							
							КонечныйУказатель = 1;
						КонецЕсли;
						
						Если НачальныйУказатель = КонечныйУказатель Тогда
							Если КонечныйУказатель = 1 Тогда
								
								Лог_Отладка("НачальныйУказатель = КонечныйУказатель. Установлена ошибка на весь модуль: " + ПутьКОбъекту);
								Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
								Лог_Отладка("		Содержимое строки: " + СодержимоеСтроки);
								
							Иначе
								НачальныйУказатель = НачальныйУказатель - 1;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						ПроверкаПройдена = Ложь;
						Лог_Отладка("Проверка не пройдена для: " + ПутьКФайлу);
						Лог_Отладка("		Ошибка: " + СтрЗаменить(НайденнаяСтрока.ТекстОшибки, Символы.ПС, Символы.ПС + "		"));
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПроверкаПройдена Тогда
					
					НайденнаяСтрока.НачальнаяКолонка = НачальныйУказатель;
					НайденнаяСтрока.КонечнаяКолонка = КонечныйУказатель;
					НайденнаяСтрока.КонечнаяСтрока = НайденнаяСтрока.НачальнаяСтрока;
					
					КоличествоПроверено = КоличествоПроверено + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НайденнаяСтрока.Проверено = ПроверкаПройдена;
			
		КонецЦикла;
		
		ТекстовыйДокумент = Неопределено;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкиАПК(ВыборкаОшибокАПК, РезультатыПроверки, МассивГруппировок)
	
	Результат = Истина;
	
	КоличествоОшибокОбщее = ВыборкаОшибокАПК.Количество();
	Лог_Отладка("Ошибок к подготовке: " + КоличествоОшибокОбщее);
	
	КоличествоОшибок = 0;
	КоличествоОбработано = 0;
	
	индикатор = ИндикаторПроцесса(КоличествоОшибокОбщее, "Подготовлено");
	
	Пока ВыборкаОшибокАПК.Следующий() Цикл
		
		КоличествоОшибок = КоличествоОшибок + 1;
		
		ОбработатьИндикатор(индикатор, КоличествоОшибок);
		
		описаниеОшибки = ДанныеОшибки(ВыборкаОшибокАПК);
		
		АбсолютныйПуть = АбсолютныйПутьОбъекта(
				описаниеОшибки.Объект,
				описаниеОшибки.ТипОбъекта,
				описаниеОшибки.МестоОбнаружения,
				описаниеОшибки.Путь);
		
		// Нет пути к исходнику - нет смысл обрабатывать дальше
		Если ПустаяСтрока(АбсолютныйПуть) Тогда
			Продолжить;
		КонецЕсли;
		
		ОшибкаНаВесьМодуль = описаниеОшибки.ОшибкаНаВесьМодуль;
		
		МестоОбнаруженияСтроки = 1;
		МестоОбнаруженияКолонки = 1;
		ПозицияВТексте = СтрНайти(описаниеОшибки.МестоОбнаружения, ШаблонПоискаУказанияСтроки);
		
		Если ПозицияВТексте > 0 Тогда
			
			ЧастьСтроки = Прав(описаниеОшибки.МестоОбнаружения, СтрДлина(описаниеОшибки.МестоОбнаружения) - ПозицияВТексте - ДлинаШаблонаПоискаУказанияСтроки);
			
			индексЗапятой = СтрНайти(ЧастьСтроки, ",");
			
			Если индексЗапятой > 0 Тогда
				
				ЧастьСтроки = Лев(ЧастьСтроки, индексЗапятой - 1);
				
			КонецЕсли;
			
			от = Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
			
			МестоОбнаруженияСтроки = от.ПривестиЗначение(СокрЛП(ЧастьСтроки));
			
			Если МестоОбнаруженияСтроки = 0 Тогда
				МестоОбнаруженияСтроки = 1;
			КонецЕсли;
			
		Иначе
			
			ЕстьСовпадение = Ложь;
			Для Каждого ЭлементПоиска Из ИменаВидовМодулей Цикл
				Если СтрНайти(ВРег(описаниеОшибки.МестоОбнаружения), ВРег(ЭлементПоиска)) > 0 Тогда
					ЕстьСовпадение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьСовпадение Тогда
				
				ОшибкаНаВесьМодуль = Истина;
				
				МестоОбнаруженияСтроки = 1;
				МестоОбнаруженияКолонки = 1;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = РезультатыПроверки.Добавить();
		Результат.Объект = описаниеОшибки.Объект;
		Результат.АбсолютныйПуть = АбсолютныйПуть;
		Результат.Путь = описаниеОшибки.Путь;
		Результат.ФайлНайден = Ложь;
		Результат.ТекстОшибки = ТекстОшибки(описаниеОшибки);
		Результат.КодОшибки = ПредставлениеОшибки(описаниеОшибки);
		
		Результат.НачальнаяСтрока = МестоОбнаруженияСтроки;
		Результат.НачальнаяКолонка = МестоОбнаруженияКолонки;
		
		Если МассивГруппировок.Найти(Результат.АбсолютныйПуть) = Неопределено Тогда
			МассивГруппировок.Добавить(Результат.АбсолютныйПуть);
		КонецЕсли;
		
		Если нРег(ФорматЭкспорта) = ФорматЭкспортаGenericIssue Тогда
			Результат.Статус = ЗначениеКритичностиGenericIssue(описаниеОшибки.Критичность);
			Результат.ТипОшибки = ТипОшибкиGenericIssue(описаниеОшибки.Критичность);
		Иначе
			Результат.Статус = ЗначениеКритичностиСтрокой(описаниеОшибки.Критичность);
			Результат.ТипОшибки = "";
		КонецЕсли;
		Результат.ИсточникПроверки = ИсточникПроверки;
		Результат.ОшибкаНаВесьМодуль = ОшибкаНаВесьМодуль;
		
		КоличествоОбработано = КоличествоОбработано + 1;
		
	КонецЦикла;
	
	Лог_Отладка("Подготовлено ошибок: " + КоличествоОбработано);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатыПроверки()
	
	РезультатыПроверки = Новый ТаблицаЗначений;
	РезультатыПроверки.Колонки.Добавить("Объект");
	РезультатыПроверки.Колонки.Добавить("АбсолютныйПуть");
	РезультатыПроверки.Колонки.Добавить("Путь");
	РезультатыПроверки.Колонки.Добавить("ТекстОшибки");
	РезультатыПроверки.Колонки.Добавить("КодОшибки");
	РезультатыПроверки.Колонки.Добавить("НачальнаяСтрока");
	РезультатыПроверки.Колонки.Добавить("НачальнаяКолонка");
	РезультатыПроверки.Колонки.Добавить("КонечнаяСтрока");
	РезультатыПроверки.Колонки.Добавить("КонечнаяКолонка");
	РезультатыПроверки.Колонки.Добавить("Статус");
	РезультатыПроверки.Колонки.Добавить("ТипОшибки");
	РезультатыПроверки.Колонки.Добавить("ИсточникПроверки");
	РезультатыПроверки.Колонки.Добавить("ФайлНайден");
	РезультатыПроверки.Колонки.Добавить("Проверено");
	РезультатыПроверки.Колонки.Добавить("ОшибкаНаВесьМодуль");
	Возврат РезультатыПроверки;
	
КонецФункции

#Область Прочее

Функция ИндикаторПроцесса(Знач КоличествоПроходов, Знач ПредставлениеПроцесса)
	
	Индикатор = Новый Структура;
	
	Индикатор.Вставить("КоличествоПроходов", КоличествоПроходов);
	Индикатор.Вставить("ПредставлениеПроцесса", ПредставлениеПроцесса);
	
	Индикатор.Вставить("ДатаНачалаПроцесса", ТекущаяДата());
	
	Индикатор.Вставить("МинимальныйПериодОбновления", 1);
	Индикатор.Вставить("ДатаСледующегоОбновления", Дата('00010101'));
	
	Возврат Индикатор;
	
КонецФункции

Процедура ОбработатьИндикатор(Индикатор, Счетчик = 0)
	
	#Если Клиент Тогда
	
	ОбработкаПрерыванияПользователя();
	
	ОбновитьИндикатор = Истина;
	ТекущаяДата = ТекущаяДата();
	Если ТекущаяДата >= Индикатор.ДатаСледующегоОбновления Тогда
		Индикатор.ДатаСледующегоОбновления = ТекущаяДата + Индикатор.МинимальныйПериодОбновления;
	Иначе
		ОбновитьИндикатор = Ложь;
	КонецЕсли;
	
	Если ОбновитьИндикатор Тогда
		
		ТекущаяДата = ТекущаяДата();
		ПрошлоВремени = ТекущаяДата - Индикатор.ДатаНачалаПроцесса;
		Осталось = ПрошлоВремени * (Индикатор.КоличествоПроходов / Счетчик - 1);
		Часов = Цел(Осталось / 3600);
		Осталось = Осталось - (Часов * 3600);
		Минут = Цел(Осталось / 60);
		Секунд = Цел(Цел(Осталось - (Минут * 60)));
		ОсталосьВремени = Формат(Часов, "ЧЦ=2; ЧН=00; ЧВН=") + ":"
			+ Формат(Минут, "ЧЦ=2; ЧН=00; ЧВН=") + ":"
			+ Формат(Секунд, "ЧЦ=2; ЧН=00; ЧВН=");
		ТекстОсталось = "Осталось: ~" + ОсталосьВремени;
		
		ТекстСостояния = Индикатор.ПредставлениеПроцесса + " "
			+ Формат(Счетчик / Индикатор.КоличествоПроходов * 100, "ЧЦ=3; ЧДЦ=0") + "%  " + ТекстОсталось;
		
		Состояние(ТекстСостояния);
		
	КонецЕсли;
	
	Если Счетчик = Индикатор.КоличествоПроходов Тогда
		Состояние("");
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ЭтоВыгрузкаEDT = Ложь;

ИсточникПроверки = "acc";
ШаблонПоискаУказанияСтроки = "стр.";
ДлинаШаблонаПоискаУказанияСтроки = СтрДлина(ШаблонПоискаУказанияСтроки);

ФорматЭкспортаReportJSON = нРег("ReportJSON");
ФорматЭкспортаGenericIssue = нРег("GenericIssue");

ФорматОшибкиТолькоКод = "code";
ФорматОшибкиТолькоНаименование = "name";
ФорматОшибкиКодНаименование = "codename";

ВерсияОбработки = "1.2.1";

#КонецОбласти