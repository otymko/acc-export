
Перем ОценкаПравил;
Перем СимволовВОкончанииHTMLОписания;

#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии()
	
	ПрочитатьПравила();
	
	сз = ЭлементыФормы.ПравилаКВыгрузке.Колонки.Type.ЭлементУправления.СписокВыбора;
	
	сз.Добавить("CODE_SMELL");
	сз.Добавить("BUG");
	сз.Добавить("VULNERABILITY");
	
	сз = ЭлементыФормы.ПравилаКВыгрузке.Колонки.Severity.ЭлементУправления.СписокВыбора;
	
	сз.Добавить("BLOCKER");
	сз.Добавить("CRITICAL");
	сз.Добавить("MAJOR");
	сз.Добавить("MINOR");
	сз.Добавить("INFO");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ПутьКФайлуВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок          = НСтр("ru='Выберите файл json для сохранения'");
	Диалог.МножественныйВыбор = Ложь;
	
	Если ЗначениеЗаполнено(ПутьКФайлуВыгрузки) Тогда
		
		Диалог.ПолноеИмяФайла = ПутьКФайлуВыгрузки;
		
	Иначе
		
		Диалог.ПолноеИмяФайла = "accRules.json";
		
	КонецЕсли;
	
	Диалог.Фильтр = "JSON (*.json)|*.json";
	
	Если Диалог.Выбрать() Тогда
		
		ПутьКФайлуВыгрузки = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлКлассификацииОшибокНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Укажите файл классификации ошибок";
	Диалог.Фильтр    = "Текстовый документ(*.csv)|*.csv";
	
	Если Диалог.Выбрать() Тогда
		
		ФайлКлассификацииОшибок = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлКлассификацииОшибокОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ФайлКлассификацииОшибок) Тогда
		
		ЗапуститьПриложение(ФайлКлассификацииОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиSTEBIНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок      = "Укажите файл настроек";
	Диалог.Фильтр         = "JSON (*.json)|*.json";
	Диалог.ПолноеИмяФайла = НастройкиSTEBI;
	
	Если Диалог.Выбрать() Тогда
		
		НастройкиSTEBI = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПравилаКВыгрузке

Процедура ПравилаКВыгрузкеПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.ПравилаКВыгрузке.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементыФормы.РедакторHTML.УстановитьТекст(ЭлементыФормы.ПравилаКВыгрузке.ТекущиеДанные.Description);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ПрочитатьПравила();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыгрузитьВJSON(Кнопка)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ПутьКФайлуВыгрузки);
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписи());
	ЗаписьJSON.Закрыть();
	
КонецПроцедуры

Процедура ПрименитьНастройкиИзФайлаВыгрузкиНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуВыгрузки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьФайл(ПутьКФайлуВыгрузки);
	настройкиИзФайла = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	Для каждого цПравило Из настройкиИзФайла.Rules Цикл
		
		найденнаяСтрока = ПравилаКВыгрузке.Найти(цПравило.Code, "Code");
		
		Если Не найденнаяСтрока = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(найденнаяСтрока, цПравило);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьФайлКлассификацииНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлКлассификацииОшибок) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Очистить();
	
	ЧтениеФайлаКлассификации = Новый ТекстовыйДокумент;
	ЧтениеФайлаКлассификации.Прочитать(ФайлКлассификацииОшибок, КодировкаТекста.ANSI);
	
	отЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Сч = 1 По ЧтениеФайлаКлассификации.КоличествоСтрок() Цикл
		
		ТекСтрока = ЧтениеФайлаКлассификации.ПолучитьСтроку(Сч);
		Значения  = СтрРазделить(ТекСтрока, ";");
		
		Серьезность         = Значения[0];
		Тип                 = Значения[1];
		ЗатрачиваемыеУсилия = отЧисло.ПривестиЗначение(Значения[2]);
		КодОшибки           = СокрЛП(Значения[3]);
		
		найденнаяСтрока = ПравилаКВыгрузке.Найти(КодОшибки, "Code");
		
		УстановитьЗначенияВСтрокуПравил(найденнаяСтрока, Серьезность, Тип, ЗатрачиваемыеУсилия);
		
	КонецЦикла;
	
	Сообщить(СтрШаблон(НСтр("ru='Строк изменено: %1'"), ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Количество()));
	
	ЧтениеФайлаКлассификации = Неопределено;
	
КонецПроцедуры

Процедура ВыгрузитьФайлКлассификацииНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлКлассификацииОшибок) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	Для Каждого цСтрокаПравила Из ПравилаКВыгрузке Цикл
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(цСтрокаПравила.Severity);
		Если цСтрокаПравила.Active Тогда
			ЧастиСтроки.Добавить(цСтрокаПравила.Type);
		Иначе
			ЧастиСтроки.Добавить("SKIP");
		КонецЕсли;
		ЧастиСтроки.Добавить(цСтрокаПравила.EffortMinutes);
		ЧастиСтроки.Добавить(цСтрокаПравила.Code);
		ЧастиСтроки.Добавить(СокрЛП(цСтрокаПравила.Name));
		
		ТекстСтроки = СтрСоединить(ЧастиСтроки, ";");
		ТекстДок.ДобавитьСтроку(ТекстСтроки);
		
	КонецЦикла;
	
	ТекстДок.Записать(ФайлКлассификацииОшибок, КодировкаТекста.ANSI);
	
КонецПроцедуры

Процедура ПрименитьНастройкиSTEBIНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(НастройкиSTEBI) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьФайл(НастройкиSTEBI);
	ОценкаПравил = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Очистить();
	
	Для Каждого цСтрокаПравил Из ПравилаКВыгрузке Цикл
		
		РезультатПоискаВОценке = НайтиПравилоВОценке(цСтрокаПравил);
		
		Если РезультатПоискаВОценке = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьЗначенияВСтрокуПравил(
			цСтрокаПравил,
			РезультатПоискаВОценке.Severity,
			РезультатПоискаВОценке.Type,
			РезультатПоискаВОценке.effortMinutes);
		
	КонецЦикла;
	
	Сообщить(СтрШаблон(НСтр("ru='Строк изменено: %1'"), ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Количество()));
	
КонецПроцедуры

Процедура ДействияФормыУстановить_CODE_SMELL(Кнопка)
	
	УстановитьТипВыделеннымСтрокам("CODE_SMELL");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_BUG(Кнопка)
	
	УстановитьТипВыделеннымСтрокам("BUG");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_VULNERABILITY(Кнопка)
	
	УстановитьТипВыделеннымСтрокам("VULNERABILITY");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_BLOCKER(Кнопка)
	
	УстановитьСерьезностьВыделеннымСтрокам("BLOCKER");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_CRITICAL(Кнопка)
	
	УстановитьСерьезностьВыделеннымСтрокам("CRITICAL");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_MAJOR(Кнопка)
	
	УстановитьСерьезностьВыделеннымСтрокам("MAJOR");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_MINOR(Кнопка)
	
	УстановитьСерьезностьВыделеннымСтрокам("MINOR");
	
КонецПроцедуры

Процедура ДействияФормыУстановить_INFO(Кнопка)
	
	УстановитьСерьезностьВыделеннымСтрокам("INFO");
	
КонецПроцедуры

Процедура ДействияФормыУстановитьАктивность(Кнопка)
	
	Для каждого цСтрокаПравила Из ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки Цикл
		
		цСтрокаПравила.Active = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыСнятьАктивность(Кнопка)
	
	Для каждого цСтрокаПравила Из ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки Цикл
		
		цСтрокаПравила.Active = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыУстановитьМинуты(Кнопка)
	
	минут = 0;
	
	Если ВвестиЧисло(минут, "Минут на исправление", 5, 0) Тогда
		
		Для каждого цСтрокаПравила Из ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки Цикл
			
			цСтрокаПравила.effortMinutes = минут;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИзменениеТаблицы

Процедура УстановитьТипВыделеннымСтрокам(Знач Тип)
	
	Для каждого цСтрокаПравила Из ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки Цикл
		
		цСтрокаПравила.Type = Тип;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСерьезностьВыделеннымСтрокам(Знач Серьезность)
	
	Для каждого цСтрокаПравила Из ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки Цикл
		
		цСтрокаПравила.Severity = Серьезность;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваТипаИКритичности(ОписаниеПравила, Правило)
	
	РезультатПоискаВОценке = НайтиПравилоВОценке(Правило);
	
	Если РезультатПоискаВОценке <> Неопределено Тогда
		
		установленыЗначения = УстановитьЗначенияВСтрокуПравил(
			ОписаниеПравила,
			РезультатПоискаВОценке.Severity,
			РезультатПоискаВОценке.Type,
			РезультатПоискаВОценке.effortMinutes);
		
		Если установленыЗначения Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Правило.ОшибкаКритичность = Перечисления.УровниКритичностиОшибок.Совместимо Тогда
		
		ОписаниеПравила.Type     = "BUG";
		ОписаниеПравила.Severity = "CRITICAL";
		
	ИначеЕсли Правило.ОшибкаКритичность = Перечисления.УровниКритичностиОшибок.Обязательно Тогда
		
		ОписаниеПравила.Type     = "CODE_SMELL";
		ОписаниеПравила.Severity = "CRITICAL";
		
	Иначе
		
		ОписаниеПравила.Type     = "CODE_SMELL";
		ОписаниеПравила.Severity = "INFO";
		
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьЗначенияВСтрокуПравил(СтрокаПравил, Знач Серьезность, Знач Тип, Знач ЗатрачиваемыеУсилия)
	
	Если СтрокаПравил = Неопределено
		ИЛИ Не ЗначениеЗаполнено(Серьезность)
		ИЛИ Не ЗначениеЗаполнено(Тип) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ВРег(Серьезность) = "SKIP" Тогда
		
		СтрокаПравил.Active = Ложь;
		ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Добавить(СтрокаПравил);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не СтрокаПравил.Severity = Серьезность
		ИЛИ Не СтрокаПравил.Type = Тип
		ИЛИ Не СтрокаПравил.EffortMinutes = ЗатрачиваемыеУсилия Тогда
		
		СтрокаПравил.Severity      = Серьезность;
		СтрокаПравил.Type          = Тип;
		СтрокаПравил.EffortMinutes = ЗатрачиваемыеУсилия;
		
		ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Добавить(СтрокаПравил);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Формирование таблицы

Процедура ПрочитатьПравила()
	
	ПравилаКВыгрузке.Очистить();
	ПрочитатьОценкуПравил();
	
	отЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого требованиеВБазе Из СтрокиТребованийВБазе() Цикл
		
		новаяСтрокаПравила = ПравилаКВыгрузке.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрокаПравила, требованиеВБазе);
		новаяСтрокаПравила.Code               = СокрЛП(требованиеВБазе.ОшибкаКод);
		новаяСтрокаПравила.Name               = требованиеВБазе.ОшибкаНаименование;
		новаяСтрокаПравила.Active             = Истина;
		новаяСтрокаПравила.NeedForCertificate = требованиеВБазе.ТребованиеПрименяетсяДля1ССовместимо;
		УстановитьСвойстваТипаИКритичности(новаяСтрокаПравила, требованиеВБазе);
		новаяСтрокаПравила.Description = ОписаниеОшибкиВHTML(требованиеВБазе);
		новаяСтрокаПравила.ЧисловойКод = отЧисло.ПривестиЗначение(новаяСтрокаПравила.Code);
		
	КонецЦикла;
	
	ЭлементыФормы.ПравилаКВыгрузке.ВыделенныеСтроки.Очистить();
	ПравилаКВыгрузке.Сортировать("ЧисловойКод");
	
	Сообщить(СтрШаблон(НСтр("ru='Прочитано правил к выгрузке: %1'"), ПравилаКВыгрузке.Количество()));
	
КонецПроцедуры

Функция СтрокиТребованийВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТребованияРеализацияТребования.Ссылка КАК Требование,
		|	ПравилаОбнаруживаемыеОшибки.Ошибка КАК Ошибка
		|ПОМЕСТИТЬ втТребования
		|ИЗ
		|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Правила.ОбнаруживаемыеОшибки КАК ПравилаОбнаруживаемыеОшибки
		|		ПО ТребованияРеализацияТребования.ПравилоПроверки = ПравилаОбнаруживаемыеОшибки.Ссылка
		|ГДЕ
		|	ПравилаОбнаруживаемыеОшибки.Ссылка.ИспользуетсяПриПроверке
		|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПолуавтоматическаяПроверка
		|	И НЕ ПравилаОбнаруживаемыеОшибки.Ссылка.ПометкаУдаления
		|	И ПравилаОбнаруживаемыеОшибки.Ошибка <> ЗНАЧЕНИЕ(Справочник.ОбнаруживаемыеОшибки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТребованияККонфигурации.Ошибка КАК Ошибка,
		|	ТребованияККонфигурации.Требование КАК Требование,
		|	ТребованияККонфигурации.Требование.СсылкаНаСтандарт КАК СсылкаНаСтандарт,
		|	ТребованияККонфигурации.Ошибка.Код КАК ОшибкаКод,
		|	ТребованияККонфигурации.Ошибка.Наименование КАК ОшибкаНаименование,
		|	ТребованияККонфигурации.Ошибка.Критичность КАК ОшибкаКритичность,
		|	ТребованияККонфигурации.Ошибка.Рекомендация КАК ОшибкаРекомендация,
		|	ТребованияККонфигурации.Требование.Описание КАК ТребованиеОписание,
		|	ТребованияККонфигурации.Требование.ОписаниеHTML КАК ТребованиеОписаниеHTML,
		|	ТребованияККонфигурации.Требование.ПрименяетсяДля1ССовместимо КАК ТребованиеПрименяетсяДля1ССовместимо
		|ИЗ
		|	втТребования КАК ТребованияККонфигурации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОшибкаКод
		|ИТОГИ
		|	МАКСИМУМ(ОшибкаКод),
		|	МАКСИМУМ(ОшибкаНаименование),
		|	МАКСИМУМ(ОшибкаКритичность),
		|	МАКСИМУМ(ТребованиеПрименяетсяДля1ССовместимо)
		|ПО
		|	Ошибка";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам).Строки;
	
КонецФункции

Процедура ПрочитатьОценкуПравил()
	
	МакетСПравилами = ЭтотОбъект.ПолучитьМакет("ПравилаОценка");
	Чтение          = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(МакетСПравилами.ПолучитьТекст());
	ОценкаПравил = ПрочитатьJSON(Чтение);
	
КонецПроцедуры

Функция НайтиПравилоВОценке(Правило)
	
	Для Каждого ОценкаПравила Из ОценкаПравил Цикл
		
		КодНачало = СокрЛП(Правило.ОшибкаКод) + " :";
		
		Если ОценкаПравила.ruleId = Правило.ОшибкаНаименование ИЛИ СтрНачинаетсяС(ОценкаПравила.ruleId, КодНачало) Тогда
			
			Возврат ОценкаПравила;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОписаниеОшибкиВHTML(Правило)
	
	Если Правило.Строки.Количество() = 1 Тогда
		
		Возврат ОписаниеHTML(Правило.Строки[0].ТребованиеОписаниеHTML, Правило.Строки[0].СсылкаНаСтандарт);
		
	ИначеЕсли Правило.Строки.Количество() > 1 Тогда
		
		Описания = Новый Массив();
		
		Для Каждого Требование Из Правило.Строки Цикл
			
			Описания.Добавить(ОписаниеHTML(Требование.ТребованиеОписаниеHTML, Требование.СсылкаНаСтандарт));
			
		КонецЦикла;
		
		Возврат СтрСоединить(Описания, Символы.ПС + Символы.ПС + Символы.ПС);
		
	Иначе
		
		Возврат "Нет описания";
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеHTML(Знач Текст, Знач СсылкаНаСтандарт)
	
	описаниеHTML = Текст;
	
	ТекстВРЕГ = ВРег(Текст);
	
	ПозицияНачалаТела = СтрНайти(ТекстВРЕГ, "<BODY");
	ПозицияКонцаТела  = СтрНайти(ТекстВРЕГ, "</BODY>");
	
	Если ПозицияНачалаТела > 0 И ПозицияКонцаТела > 0 Тогда
		
		описаниеHTML = СокрЛП(Сред(Текст, ПозицияНачалаТела + СтрДлина("<BODY>"), ПозицияКонцаТела - (ПозицияНачалаТела + СтрДлина("<BODY>"))));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаСтандарт) Тогда
		
		описаниеHTML = СтрЗаменить(описаниеHTML, "#std", СтрШаблон("<a href=""%1"">#std</a>", СсылкаНаСтандарт));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(описаниеHTML) Тогда
		
		описаниеHTML = "Нет описания";
		
	КонецЕсли;
	
	Возврат описаниеHTML;
	
КонецФункции

// Запись в файл

Функция ДанныеДляЗаписи()
	
	Правила = Новый Массив();
	
	Для Каждого ПравилоКВыгрузке Из ПравилаКВыгрузке Цикл
		
		НовыйЭлемент = Новый Структура("Code,Type,Severity,Name,Description,Active,NeedForCertificate,EffortMinutes");
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ПравилоКВыгрузке);
		Правила.Добавить(НовыйЭлемент);
		
	КонецЦикла;
	
	Возврат Новый Структура("Rules", Правила);
	
КонецФункции

#КонецОбласти

СимволовВОкончанииHTMLОписания = 13;
